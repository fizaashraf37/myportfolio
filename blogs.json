{"status":"ok","feed":{"url":"https://medium.com/feed/@fizaashraf37","title":"Stories by Fizaashraf on Medium","link":"https://medium.com/@fizaashraf37?source=rss-fc853dc52440------2","author":"","description":"Stories by Fizaashraf on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*E6TUx7kszXYTcXJEI8O1Nw.png"},"items":[{"title":"Install Kubernetes on Local Machine","pubDate":"2023-08-07 12:49:26","link":"https://medium.com/@fizaashraf37/install-kubernetes-on-local-machine-617d7549faa0?source=rss-fc853dc52440------2","guid":"https://medium.com/p/617d7549faa0","author":"Fizaashraf","thumbnail":"","description":"\n<p>In this article you will learn how you can setup Kubernetes (Learning Environment) on your local machine. For production environment please refer to Kubernetes <a href=\"https://kubernetes.io/docs/setup/\">official documentation</a>. If you are new to Kubernetes and do not have knowledge of its components then it is recommended to first learn about its different components.</p>\n<p>These are some tools that you need to run Kubernetes on your local\u00a0machine.</p>\n<ol>\n<li><a href=\"https://kubernetes.io/docs/reference/kubectl/\">Kubectl</a></li>\n<li><a href=\"https://minikube.sigs.k8s.io/docs/start/\">Minikube</a></li>\n</ol>\n<h3>Install Kubectl</h3>\n<p>To run all Kubernetes commands you need Kubernetes command-line tool <a href=\"https://kubernetes.io/docs/reference/kubectl/\">kubectl</a>. This tool allows you to run commands against Kubernetes cluster.</p>\n<p>kubectl is installable on a variety of Linux platforms, macOS and Windows. Find your preferred operating system\u00a0below.</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux\">Install kubectl on\u00a0Linux</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos\">Install kubectl on\u00a0macOS</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-windows\">Install kubectl on\u00a0Windows</a></li>\n</ul>\n<h3>Install MiniKube</h3>\n<p><a href=\"https://minikube.sigs.k8s.io/\">minikube</a> is a tool that lets you run Kubernetes locally. Minikube needs a Container or virtual machine manager, such as: <a href=\"https://minikube.sigs.k8s.io/docs/drivers/docker/\">Docker</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/qemu/\">QEMU</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/hyperkit/\">Hyperkit</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/hyperv/\">Hyper-V</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/kvm2/\">KVM</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/parallels/\">Parallels</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/podman/\">Podman</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/virtualbox/\">VirtualBox</a>, or <a href=\"https://minikube.sigs.k8s.io/docs/drivers/vmware/\">VMware Fusion/Workstation</a>.</p>\n<p>If you are not familiar with any of these, then I would recommend to use Docker or Podman. You can follow the official documentation of <a href=\"https://docs.docker.com/get-docker/\">Docker</a> or Podman to install it on your\u00a0machine.</p>\n<p>Please note that Docker Desktop is now licensed. So I would recommend to not install docker desktop on your machine. You can instead install Podman which is similar to Docker and is open\u00a0source.</p>\n<p>Alternatively you can use <a href=\"https://smallsharpsoftwaretools.com/tutorials/use-colima-to-run-docker-containers-on-macos/\">colima</a> to install docker on your mac machine. This will only install docker engine and not full docker desktop. If you are on windows then you can follow use <a href=\"https://medium.com/@fizaashraf37/run-docker-linux-containers-on-windows-server-2019-lcow-step-by-step-guide-452cf6bf3180\">LCOW</a> to install and run docker on your windows\u00a0machine.</p>\n<p>Go to minikube G<a href=\"https://minikube.sigs.k8s.io/docs/start/\">et Started</a> page and select your OS, Architecture, Release Type and Installer Type to automatically generate the installation commands for\u00a0you.</p>\n<p>Once minikube is installed you need to start your first cluster. Before starting the cluster make sure that Dockers is installed on your machine and docker deamon is running. Otherwise this command will start installing the VM image on your machine and will give you <em>QEMU driver without a dedicated network</em>\u00a0warning.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Xz7XQWSPkj6uFHbOf56idQ.png\"><figcaption>Running minikube start without starting docker\u00a0deamon</figcaption></figure><p>To avoid this error start docker deamon first and then rerun this\u00a0command.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9BLcapxHCNwsQRqSmwgEXw.png\"><figcaption>Minikube configured with\u00a0Docker</figcaption></figure><p>Once the minikube cluster is installed, you can run commands on this cluster using kubectl. Let\u2019s run the first command to list all the pods inside our minikube\u00a0cluster.</p>\n<pre>kubectl get po -A</pre>\n<p>This will list all of the active/running pods inside your cluster namespaces.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*24Vv8EAc-vl8xiKS8d64DA.png\"></figure><p>To start the Kubernetes dashboard inside your browser run this\u00a0command</p>\n<pre>minikube dashboard</pre>\n<p>You can also see the pods under nodes of your cluster on the Dashboard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qYXfLPatociUicIYtqBj-A.png\"><figcaption>Kubernetes Dashboard</figcaption></figure><p>This is all that you need to install and run kubernetes on your local machine. Now you can explore different kubectl commands to run on your minikube\u00a0cluster.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=617d7549faa0\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In this article you will learn how you can setup Kubernetes (Learning Environment) on your local machine. For production environment please refer to Kubernetes <a href=\"https://kubernetes.io/docs/setup/\">official documentation</a>. If you are new to Kubernetes and do not have knowledge of its components then it is recommended to first learn about its different components.</p>\n<p>These are some tools that you need to run Kubernetes on your local\u00a0machine.</p>\n<ol>\n<li><a href=\"https://kubernetes.io/docs/reference/kubectl/\">Kubectl</a></li>\n<li><a href=\"https://minikube.sigs.k8s.io/docs/start/\">Minikube</a></li>\n</ol>\n<h3>Install Kubectl</h3>\n<p>To run all Kubernetes commands you need Kubernetes command-line tool <a href=\"https://kubernetes.io/docs/reference/kubectl/\">kubectl</a>. This tool allows you to run commands against Kubernetes cluster.</p>\n<p>kubectl is installable on a variety of Linux platforms, macOS and Windows. Find your preferred operating system\u00a0below.</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux\">Install kubectl on\u00a0Linux</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos\">Install kubectl on\u00a0macOS</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-windows\">Install kubectl on\u00a0Windows</a></li>\n</ul>\n<h3>Install MiniKube</h3>\n<p><a href=\"https://minikube.sigs.k8s.io/\">minikube</a> is a tool that lets you run Kubernetes locally. Minikube needs a Container or virtual machine manager, such as: <a href=\"https://minikube.sigs.k8s.io/docs/drivers/docker/\">Docker</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/qemu/\">QEMU</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/hyperkit/\">Hyperkit</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/hyperv/\">Hyper-V</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/kvm2/\">KVM</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/parallels/\">Parallels</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/podman/\">Podman</a>, <a href=\"https://minikube.sigs.k8s.io/docs/drivers/virtualbox/\">VirtualBox</a>, or <a href=\"https://minikube.sigs.k8s.io/docs/drivers/vmware/\">VMware Fusion/Workstation</a>.</p>\n<p>If you are not familiar with any of these, then I would recommend to use Docker or Podman. You can follow the official documentation of <a href=\"https://docs.docker.com/get-docker/\">Docker</a> or Podman to install it on your\u00a0machine.</p>\n<p>Please note that Docker Desktop is now licensed. So I would recommend to not install docker desktop on your machine. You can instead install Podman which is similar to Docker and is open\u00a0source.</p>\n<p>Alternatively you can use <a href=\"https://smallsharpsoftwaretools.com/tutorials/use-colima-to-run-docker-containers-on-macos/\">colima</a> to install docker on your mac machine. This will only install docker engine and not full docker desktop. If you are on windows then you can follow use <a href=\"https://medium.com/@fizaashraf37/run-docker-linux-containers-on-windows-server-2019-lcow-step-by-step-guide-452cf6bf3180\">LCOW</a> to install and run docker on your windows\u00a0machine.</p>\n<p>Go to minikube G<a href=\"https://minikube.sigs.k8s.io/docs/start/\">et Started</a> page and select your OS, Architecture, Release Type and Installer Type to automatically generate the installation commands for\u00a0you.</p>\n<p>Once minikube is installed you need to start your first cluster. Before starting the cluster make sure that Dockers is installed on your machine and docker deamon is running. Otherwise this command will start installing the VM image on your machine and will give you <em>QEMU driver without a dedicated network</em>\u00a0warning.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Xz7XQWSPkj6uFHbOf56idQ.png\"><figcaption>Running minikube start without starting docker\u00a0deamon</figcaption></figure><p>To avoid this error start docker deamon first and then rerun this\u00a0command.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9BLcapxHCNwsQRqSmwgEXw.png\"><figcaption>Minikube configured with\u00a0Docker</figcaption></figure><p>Once the minikube cluster is installed, you can run commands on this cluster using kubectl. Let\u2019s run the first command to list all the pods inside our minikube\u00a0cluster.</p>\n<pre>kubectl get po -A</pre>\n<p>This will list all of the active/running pods inside your cluster namespaces.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*24Vv8EAc-vl8xiKS8d64DA.png\"></figure><p>To start the Kubernetes dashboard inside your browser run this\u00a0command</p>\n<pre>minikube dashboard</pre>\n<p>You can also see the pods under nodes of your cluster on the Dashboard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qYXfLPatociUicIYtqBj-A.png\"><figcaption>Kubernetes Dashboard</figcaption></figure><p>This is all that you need to install and run kubernetes on your local machine. Now you can explore different kubectl commands to run on your minikube\u00a0cluster.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=617d7549faa0\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["kubernetes"]},{"title":"Develop a CRUD Application using Django and React (Part 3)","pubDate":"2022-10-16 14:24:15","link":"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af?source=rss-fc853dc52440------2","guid":"https://medium.com/p/f3d0d28139af","author":"Fizaashraf","thumbnail":"","description":"\n<p>In previous articles we learned to <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-1-2e8927a1e0c8\">develop the backend</a> of a simple student management web application using Django REST framework and introduced <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb\">React Core concepts</a>.</p>\n<p>In this article you will write code to develop the frontend of student management app.</p>\n<p>You can get the source code from my GitHub\u00a0repo:</p>\n<p><a href=\"https://github.com/fizaashraf37/smwa-project\">GitHub - fizaashraf37/smwa-project: A simple student management web application with CRUD operations developed in Django and React Js</a></p>\n<p>Watch full step by step tutorial on\u00a0YouTube</p>\n<a href=\"https://medium.com/media/c0cc923f0fc2d2f0d4a1efdcb2503966/href\">https://medium.com/media/c0cc923f0fc2d2f0d4a1efdcb2503966/href</a><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yl4_7966YvNbdDty4zB8dg.png\"></figure><h3>Table of\u00a0Contents</h3>\n<ol>\n<li>Prerequisites</li>\n<li>Create React\u00a0App</li>\n<li>Create TOP Navigation Bar</li>\n<li>Create Side Navigation Bar</li>\n<li>Create Home\u00a0Page</li>\n<li>Create Students List\u00a0Page</li>\n<li>Create Manage Students\u00a0Page</li>\n<li>Test CRUD operations</li>\n<li>Summary</li>\n</ol>\n<h3>Prerequisites</h3>\n<p>Make sure you have a recent version of <a href=\"https://nodejs.org/en/download/\">Node.js</a> installed.</p>\n<p>After installation check if node and npm are installed in your system. Run below commands to check node and npm versions in command\u00a0prompt:</p>\n<p>Check node\u00a0version</p>\n<pre>node --version</pre>\n<p>Check npm\u00a0version</p>\n<pre>npm -version</pre>\n<h3>Create React\u00a0App</h3>\n<p>Open Pycharm project where you created the backend of this app. If you do not want to go through backend part of this app. Then you can clone the backend repository from Github and install python and django to run the\u00a0backend.</p>\n<ol><li>Inside your project directory run this command to create react\u00a0app:</li></ol>\n<pre>npx create-react-app frontend</pre>\n<p>This will take some time to create the app. Your directory structure should look like this once app is\u00a0created:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/345/1*3R7fJ8b-cXmljkwK5ammbQ.png\"></figure><p>2. Navigate to frontend directory:</p>\n<pre>cd frontend</pre>\n<p>3. Run npm start to start the react\u00a0app:</p>\n<pre>npm start</pre>\n<p>This will start the app in your browser <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iR3QRa8yD4dpw-3Vr_JgFg.png\"></figure><p>4. We do not need the starter code generated by React. Delete all the files inside src/ folder except index.js and reportWebVitals.jsfiles.</p>\n<blockquote><em>Note:</em></blockquote>\n<blockquote>\n<strong><em>Don\u2019t delete the entire </em></strong><strong><em>src folder, just the original source files inside it.</em></strong><em> We\u2019ll replace the default source files with examples for this project in the next\u00a0step.</em>\n</blockquote>\n<p>5. Add a file named index.css in the src/ folder with this CSS\u00a0code:</p>\n<pre>body {<br>  font: 14px \"Century Gothic\", Futura, sans-serif;<br>  margin: 0;<br>}</pre>\n<p>6. Take a look at the index.js file\u00a0code</p>\n<pre>import App from './App';<br>import reportWebVitals from './reportWebVitals';<br><br>const root = ReactDOM.createRoot(document.getElementById('root'));<br>root.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;App /&gt;<br>  &lt;/React.StrictMode&gt;<br>);<br><br>// If you want to start measuring performance in your app, pass a function<br>// to log results (for example: reportWebVitals(console.log))<br>// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals<br>reportWebVitals();</pre>\n<p>This index.js file is the starting point of the app. ReactDOM.createRoot() function will create the root element for the react app. root.render() will render the content on web page. &lt;App /&gt;is our main React component which we will define in App.js\u00a0file.</p>\n<p>7. Add a file named App.js in the src/ folder with this JSX\u00a0code:</p>\n<pre>import React from 'react';<br><br>function App() {<br>  return (<br>    &lt;h1&gt; Student Management System App &lt;/h1&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>Now if you will run npm startagain you should see a simple\u00a0heading.</p>\n<pre>npm start</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/851/1*91QY1qX1D6Bgu7NAi8OMtw.png\"></figure><p>Next step is to create React components for Home, Navigation Bar, Students list and Manage Students\u00a0page.</p>\n<p>Create a new directory named components inside src/ folder. Your directory structure should look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/317/1*2QLr9vff_9jIxNr3UKn9jQ.png\"></figure><h3>Create TOP Navigation Bar</h3>\n<p>Now we will start writing the code for top Navigation bar which will remain static for all\u00a0pages.</p>\n<ol><li>We will be using react-bootstrap library for this project. React-Bootstrap <strong>replaces the Bootstrap JavaScript</strong>. Each component has been built from scratch as a true React component, without unneeded dependencies like jQuery. To add react-bootstrap to your project run these commands inside frontend\u00a0folder:</li></ol>\n<pre>npm install bootstrap<br>npm install react-bootstrap</pre>\n<p>This will add bootstrap and react-bootstrap dependencies inside package.json file.</p>\n<p>2. Next we will add some styling to set the width and height of the page at 100% and also add some padding for our\u00a0logo.</p>\n<p>Add a file named App.css in the src/ folder with this\u00a0code:</p>\n<pre>body, html {<br>  height: 100%;<br>  width: 100%;<br>  margin: 0;<br>}<br><br>.app-logo {<br>   padding-left: 50px;<br>}</pre>\n<p>3. We will put all the images and logo files inside static folder. Create a folder named static in the src/ folder and add logo.pngfile in this\u00a0folder.</p>\n<p>4. Add a file named Navigation.js in the src/components/ folder with this\u00a0code:</p>\n<pre>import React from 'react';<br>import {Navbar,Nav} from 'react-bootstrap';<br>import logo from '../static/logo.png'<br>import \"../App.css\";<br><br><br>const Navigation = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>    &lt;Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" id=\"my-nav\"&gt;<br>        &lt;Navbar.Brand className=\"app-logo\" href=\"/\"&gt;<br>            &lt;img<br>              src={logo}<br>              width=\"40\"<br>              height=\"50\"<br>              className=\"d-inline-block align-center\"<br>              alt=\"React Bootstrap logo\"<br>            /&gt;{' '}<br>            Student Management System<br>        &lt;/Navbar.Brand&gt;<br>    &lt;/Navbar&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default Navigation;</pre>\n<p>Now if you refresh the browser, you will still see the old page. The Navigation bar is not being rendered. It is because we have not added this component in our main App component. To render each component we need to add this inside our App.js\u00a0file.</p>\n<p>4. Add these lines below import React from react; in src/App.js file:</p>\n<pre>import React from 'react';<br>import 'bootstrap/dist/css/bootstrap.min.css';<br>import Navigation from \"./components/Navigation\";</pre>\n<p>Here we are importing bootstrap styling and Navigation component from components folder that we just created inside\u00a0App.js.</p>\n<p>5. Add below code in src/App.js to render Navigation component:</p>\n<pre>function App() {<br>  return (<br>      &lt;Navigation /&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>Your screen should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nK6cIdPKAWypIJ_0MWgF9g.png\"></figure><h3>Create Side Navigation Bar</h3>\n<ol><li>For side navigation bar we will use cdbreact library. Install this library using below\u00a0command:</li></ol>\n<pre>npm install cdbreact</pre>\n<p>2. Import NavLink and cdbreact components inside src/components/Navigation.js. We will use NavLink to navigate to different pages e.g Home, Students List or Manage students and use cdbreact to create\u00a0Sidebar.</p>\n<pre>import {NavLink} from 'react-router-dom';<br>import {<br>  CDBSidebar,<br>  CDBSidebarContent,<br>  CDBSidebarFooter,<br>  CDBSidebarHeader,<br>  CDBSidebarMenu,<br>  CDBSidebarMenuItem,<br>} from 'cdbreact';</pre>\n<p>3. Add code for sidebar in Navigation.js file below line &lt;/Navbar&gt;</p>\n<pre>&lt;div className='sidebar'&gt;<br>&lt;CDBSidebar textColor=\"#333\" backgroundColor=\"#f0f0f0\"&gt;<br>    &lt;CDBSidebarHeader prefix={&lt;i className=\"fa fa-bars\" /&gt;}&gt;<br>      Navigation<br>    &lt;/CDBSidebarHeader&gt;<br>    &lt;CDBSidebarContent&gt;<br>      &lt;CDBSidebarMenu&gt;<br>        &lt;NavLink exact to=\"/\" activeClassName=\"activeClicked\"&gt;<br>          &lt;CDBSidebarMenuItem icon=\"home\"&gt;Home&lt;/CDBSidebarMenuItem&gt;<br>        &lt;/NavLink&gt;<br>        &lt;NavLink exact to=\"/student\" activeClassName=\"activeClicked\"&gt;<br>          &lt;CDBSidebarMenuItem icon=\"list\"&gt;Students List&lt;/CDBSidebarMenuItem&gt;<br>        &lt;/NavLink&gt;<br>        &lt;NavLink exact to=\"/manage\" activeClassName=\"activeClicked\"&gt;<br>          &lt;CDBSidebarMenuItem icon=\"user\"&gt;Manage Students&lt;/CDBSidebarMenuItem&gt;<br>        &lt;/NavLink&gt;<br>      &lt;/CDBSidebarMenu&gt;<br>    &lt;/CDBSidebarContent&gt;<br>  &lt;/CDBSidebar&gt;<br>&lt;/div&gt;</pre>\n<p>Your final Navigation.js file should look like\u00a0this:</p>\n<pre>import React from 'react';<br>import {<br>  CDBSidebar,<br>  CDBSidebarContent,<br>  CDBSidebarHeader,<br>  CDBSidebarMenu,<br>  CDBSidebarMenuItem,<br>} from 'cdbreact';<br>import {NavLink} from 'react-router-dom';<br>import {Navbar} from 'react-bootstrap';<br>import logo from '../static/logo.png';<br>import \"../App.css\";<br><br><br>const Navigation = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>    &lt;Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" id=\"my-nav\"&gt;<br>        &lt;Navbar.Brand className=\"app-logo\" href=\"/\"&gt;<br>            &lt;img<br>              src={logo}<br>              width=\"40\"<br>              height=\"50\"<br>              className=\"d-inline-block align-center\"<br>              alt=\"React Bootstrap logo\"<br>            /&gt;{' '}<br>            Student Management System<br>        &lt;/Navbar.Brand&gt;<br>    &lt;/Navbar&gt;<br>    &lt;div className='sidebar'&gt;<br>    &lt;CDBSidebar textColor=\"#333\" backgroundColor=\"#f0f0f0\"&gt;<br>        &lt;CDBSidebarHeader prefix={&lt;i className=\"fa fa-bars\" /&gt;}&gt;<br>          Navigation<br>        &lt;/CDBSidebarHeader&gt;<br>        &lt;CDBSidebarContent&gt;<br>          &lt;CDBSidebarMenu&gt;<br>            &lt;NavLink exact to=\"/\" activeClassName=\"activeClicked\"&gt;<br>              &lt;CDBSidebarMenuItem icon=\"home\"&gt;Home&lt;/CDBSidebarMenuItem&gt;<br>            &lt;/NavLink&gt;<br>            &lt;NavLink exact to=\"/students\" activeClassName=\"activeClicked\"&gt;<br>              &lt;CDBSidebarMenuItem icon=\"list\"&gt;Students List&lt;/CDBSidebarMenuItem&gt;<br>            &lt;/NavLink&gt;<br>            &lt;NavLink exact to=\"/manage\" activeClassName=\"activeClicked\"&gt;<br>              &lt;CDBSidebarMenuItem icon=\"user\"&gt;Manage Students&lt;/CDBSidebarMenuItem&gt;<br>            &lt;/NavLink&gt;<br>          &lt;/CDBSidebarMenu&gt;<br>        &lt;/CDBSidebarContent&gt;<br>      &lt;/CDBSidebar&gt;<br>    &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default Navigation;</pre>\n<p>4. For side Navbar we are using className='sidebar'.We need to define this class inside our src/App.css file:</p>\n<pre>.sidebar {<br>   display: flex;<br>   height: 100vh;<br>   float: left;<br>   overflow: 'scroll initial';<br>}</pre>\n<p>5. For NavLink to work, we will need to import BroswseRouter component in our src/App.js file:</p>\n<pre>import {BrowserRouter} from 'react-router-dom';</pre>\n<p>6. Update function App()code with below code in\u00a0App.js:</p>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br>    &lt;/BrowserRouter&gt;<br>  );<br>}</pre>\n<p>7. Now if you will refresh the page, it should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/977/1*GlEAuwmxyQc8uKvhmH5rVQ.png\"></figure><h3>Create Home\u00a0Page</h3>\n<p>Our home page is a simple image slider. For image slider we will use react-bootstrap Carouselcomponent.</p>\n<ol><li>Add a file named Home.js inside /src/components folder with this\u00a0code:</li></ol>\n<pre>import slide01 from '../static/slide01.jpg'<br>import slide02 from '../static/slide02.jpg'<br>import slide03 from '../static/slide03.jpg'<br><br>import Carousel from 'react-bootstrap/Carousel';<br><br>const Home = () =&gt; {<br>  return (<br>  &lt;div className=\"row\"&gt;<br>    &lt;Carousel variant=\"dark\"&gt;<br>      &lt;Carousel.Item&gt;<br>        &lt;img<br>          className=\"d-block w-100\"<br>          src={slide01}<br>          alt=\"First slide\"<br>        /&gt;<br>      &lt;/Carousel.Item&gt;<br>      &lt;Carousel.Item&gt;<br>        &lt;img<br>          className=\"d-block w-100\"<br>          src={slide03}<br>          alt=\"Second slide\"<br>        /&gt;<br>      &lt;/Carousel.Item&gt;<br>      &lt;Carousel.Item&gt;<br>        &lt;img<br>          className=\"d-block w-100\"<br>          src={slide02}<br>          alt=\"Third slide\"<br>        /&gt;<br>      &lt;/Carousel.Item&gt;<br>    &lt;/Carousel&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default Home;</pre>\n<p>2. Add files slide01.jpg, slide02.jpg and slide03.jpg inside/src/static folder.</p>\n<p>3. We need to add Home component inside App.js file for this to render. But before that we need to install react-router library as we will be using React Router to route to different pages.</p>\n<pre>npm install react-router<br>npm install react-router-dom</pre>\n<p>4. Add Home component as a Route inside App.js\u00a0file:</p>\n<pre><strong>import Home from \"./components/Home\";<br>import {</strong>BrowserRouter<strong>, Route, Routes} from 'react-router-dom';</strong></pre>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br><strong>&lt;Routes&gt;<br>         &lt;Route exact path=\"/\" element={&lt;Home/&gt;} /&gt;<br>       &lt;/Routes&gt;</strong><br>    &lt;/BrowserRouter&gt;<br>  );<br>}</pre>\n<p>5. Now if you will do npm startand refresh the page, it should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IpTd_pdbG90234SHY7KPlg.png\"></figure><p>If you navigate to Students List or Manage Students page, you should see empty pages. Lets start developing these\u00a0pages.</p>\n<h3>Create Students List\u00a0Page</h3>\n<p>We will get the students list from our backend API that we developed in first part of this tutorial. To call the API from react, we will create a StudentService.</p>\n<ol><li>Create a folder named servicesinside /srcfolder and a add a file named StudentService.jsinside /src/servicesfolder with this\u00a0code:</li></ol>\n<pre>import axios from 'axios';<br><br>export function getStudents() {<br>  return axios.get('http://127.0.0.1:8000/students/')<br>    .then(response =&gt; response.data)<br>}</pre>\n<p>Here we are creating a function getStudents()which is calling our backend API endpoint /students to fetch list of students from backend. We are using axios library for this. Install this library using below\u00a0command:</p>\n<pre>npm install axios</pre>\n<p>2. Add styling for this component inside App.css\u00a0file:</p>\n<pre>.side-container {<br>   padding-top: 30px;<br>}<br><br>.side-row {<br>   padding: 30px;<br>}<br><br>.react-bootstrap-table thead { <br>    position: sticky; <br>    top: 0; <br>    background-color: #333; <br>    z-index: 1021; <br>    color: white; <br>}</pre>\n<p>3. Add a file named Students.js inside /src/components folder with below\u00a0code:</p>\n<pre>import React, { useEffect, useState } from 'react';<br>import { Table } from 'react-bootstrap';<br>import { getStudents } from '../services/StudentService';<br>import \"../App.css\";<br><br>const Students = () =&gt; {<br>  const [students, setStudents] = useState([]);<br><br>  useEffect(() =&gt; {<br>   let mounted = true;<br>   getStudents()<br>     .then(data =&gt; {<br>       if(mounted) {<br>         setStudents(data)<br>       }<br>     })<br>   return () =&gt; mounted = false;<br> }, [])<br><br>  return(<br>   &lt;div className=\"container-fluid side-container\"&gt;<br>   &lt;div className=\"row side-row\" &gt;<br>    &lt;p id=\"before-table\"&gt;&lt;/p&gt;<br>        &lt;Table striped bordered hover className=\"react-bootstrap-table\" id=\"dataTable\"&gt;<br>        &lt;thead&gt;<br>            &lt;tr&gt;<br>            &lt;th&gt;ID&lt;/th&gt;<br>            &lt;th&gt;First Name&lt;/th&gt;<br>            &lt;th&gt;Last Name&lt;/th&gt;<br>            &lt;th&gt;Registration No&lt;/th&gt;<br>            &lt;th&gt;Email&lt;/th&gt;<br>            &lt;th&gt;Course&lt;/th&gt;<br>            &lt;/tr&gt;<br>        &lt;/thead&gt;<br>        &lt;tbody&gt;<br>            {students.map((stu) =&gt;<br>            &lt;tr key={stu.id}&gt;<br>                &lt;td&gt;{stu.studentId}&lt;/td&gt;<br>                &lt;td&gt;{stu.FirstName}&lt;/td&gt;<br>                &lt;td&gt;{stu.LastName}&lt;/td&gt;<br>                &lt;td&gt;{stu.RegistrationNo}&lt;/td&gt;<br>                &lt;td&gt;{stu.Email}&lt;/td&gt;<br>                &lt;td&gt;{stu.Course}&lt;/td&gt;<br>            &lt;/tr&gt;)}<br>        &lt;/tbody&gt;<br>    &lt;/Table&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  );<br>};<br><br>export default Students;</pre>\n<p>In first line of function Students(), we are using a react state students and initializing this state to empty array using react hook useState:</p>\n<pre>const [students, setStudents] = useState([]);</pre>\n<p>useEffect hook is calling getStudents service that we defined inside StudentService.js file. This will be called every time page is refreshed or\u00a0loaded.</p>\n<p>4. Finally, we will add a route for Students component inside\u00a0App.js:</p>\n<pre><strong>import Students from \"./components/Students\";</strong></pre>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br>      &lt;Routes&gt;<br>         &lt;Route exact path=\"/\" element={&lt;Home/&gt;} /&gt;<br><strong>&lt;Route path=\"/students\" element={&lt;Students/&gt;} /&gt;</strong><br>       &lt;/Routes&gt;<br>    &lt;/BrowserRouter&gt;<br>  );<br>}</pre>\n<p>5. Now if you refresh the page and navigate to Students List page, you should get the data from backend. And it should render on frontend. If any new object is added or deleted from backend and page is refreshed on frontend, then you will see the changes on frontend.</p>\n<p>6. If you do not see any data, then make sure that backend service is up. To start the backend navigate to backend directory and start django\u00a0server:</p>\n<pre>cd backend<br>python manage.py runserver</pre>\n<p>If you still do not get the data, then inspect the API call. Right click on students list page and click inspect. In opened window go inside Netwroktab and refresh students list page. If you get CORS errorin status field then you need to fix this from backend. This error usually happens if Cross-Origin Resource Sharing is not allowed by backend server. In that case AllowOrigin header is usually missing in the response. To allow javascript to read response data from API, Cross-Origin Resource Sharing must be allowed by backend\u00a0server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KXc0ejSojElecYAfgqQqFA.png\"></figure><p>In backend/settings.py file make sure these settings are\u00a0set:</p>\n<p>i) Check if \u2019corsheaders' is added in INSTALLED_APPS:</p>\n<pre>INSTALLED_APPS = [<br>    'django.contrib.admin',<br>    'django.contrib.auth',<br>    'django.contrib.contenttypes',<br>    'django.contrib.sessions',<br>    'django.contrib.messages',<br>    'django.contrib.staticfiles',<br>    'backend',<br><strong>'corsheaders',</strong><br>    'rest_framework',<br>]</pre>\n<p>ii) Check if CORS_ORIGIN_ALLOW_ALL = True is\u00a0set:</p>\n<pre>CORS_ORIGIN_ALLOW_ALL = True</pre>\n<p>iii) Check if 'corsheaders.middleware.CorsMiddleware'is added in MIDDLEWARE:</p>\n<pre><strong>CORS_ORIGIN_ALLOW_ALL = True</strong><br><br>MIDDLEWARE = [<br><strong>'corsheaders.middleware.CorsMiddleware',</strong><br>    'django.middleware.security.SecurityMiddleware',<br>    'django.contrib.sessions.middleware.SessionMiddleware',<br>    'django.middleware.common.CommonMiddleware',<br>    'django.middleware.csrf.CsrfViewMiddleware',<br>    'django.contrib.auth.middleware.AuthenticationMiddleware',<br>    'django.contrib.messages.middleware.MessageMiddleware',<br>    'django.middleware.clickjacking.XFrameOptionsMiddleware',<br>]</pre>\n<p>7. Now if you will refresh the students list page you should see that data is rendered:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TbuAS_NbkPia-h8YTsW4dQ.png\"></figure><h3>Create Manage Students\u00a0Page</h3>\n<p>We need to write the functionality for add student, update student and delete student. We will create separate components for these. We will also need to install react-icons library as we will be using delete and update icons from this\u00a0library.</p>\n<pre>npm install react-cions</pre>\n<p><strong>Create Manage.js</strong></p>\n<ol>\n<li>Add a file named Manage.js in /src/components folder</li>\n<li>Add these imports in Manage.js file:</li>\n</ol>\n<pre>import React,{ useEffect, useState } from 'react';<br>import {Table} from 'react-bootstrap';<br><br>import {Button,ButtonToolbar } from 'react-bootstrap';<br>import { FaEdit } from 'react-icons/fa';<br>import { RiDeleteBin5Line } from 'react-icons/ri';<br>import { getStudents, deleteStudent } from '../services/StudentService';<br>import AddStudentModal from \"./AddStudentModal\";<br>import UpdateStudentModal from \"./UpdateStudentModal\";</pre>\n<p>We are using useState hook for managing states e.g. for updating students list when a new student is added or deleted. useEffect state will be used for managing events e.g. updating page contents when a student is added or\u00a0deleted.</p>\n<p>We will add components for AddStudentModal and updateStudentModal later.</p>\n<p>3. Add these states in Manage.js file:</p>\n<pre>const Manage = () =&gt; {<br>    const [students, setStudents] = useState([]);<br>    const [addModalShow, setAddModalShow] = useState(false);<br>    const [editModalShow, setEditModalShow] = useState(false);<br>    const [editStudent, setEditStudent] = useState([]);<br>    const [isUpdated, setIsUpdated] = useState(false);<br>};<br><br>export default Manage;</pre>\n<p>4. Add useEffect hook in Manage.js:</p>\n<pre>useEffect(() =&gt; {<br>   let mounted = true;<br>   if(students.length &amp;&amp; !isUpdated) {<br>    return;<br>    }<br>   getStudents()<br>     .then(data =&gt; {<br>       if(mounted) {<br>         setStudents(data);<br>       }<br>     })<br>   return () =&gt; {<br>      mounted = false;<br>      setIsUpdated(false);<br>   }<br> }, [isUpdated, students])</pre>\n<p>In this hook we are checking if the students list is updated on backend due to any CRUD operation then we will update the students state and re-render the updated list. We will also update the state and re-render whenever page is refreshed or loaded. We are handling this using mounted\u00a0flag.</p>\n<p>5. Next we will add handlers for handling update, add and delete\u00a0events:</p>\n<pre>const handleUpdate = (e, stu) =&gt; {<br>    e.preventDefault();<br>    setEditModalShow(true);<br>    setEditStudent(stu);<br>};</pre>\n<p>Here, whenever use will click update button, we will call handleUpdate handler on button click event. This handler will set some states i.e. it will enable edit student form for editing\u00a0student.</p>\n<p>Similarly we can add Add and Delete handlers:</p>\n<pre>const handleAdd = (e) =&gt; {<br>    e.preventDefault();<br>    setAddModalShow(true);<br>};<br><br>const handleDelete = (e, studentId) =&gt; {<br>    if(window.confirm('Are you sure ?')){<br>        e.preventDefault();<br>        deleteStudent(studentId)<br>        .then((result)=&gt;{<br>            alert(result);<br>            setIsUpdated(true);<br>        },<br>        (error)=&gt;{<br>            alert(\"Failed to Delete Student\");<br>        })<br>    }<br>};</pre>\n<p>In handleDelete we are calling deleteStudent service which we will define in /src/services/StudentService.js file:</p>\n<pre>export function deleteStudent(studentId) {<br>  return axios.delete('http://127.0.0.1:8000/students/' + studentId + '/', {<br>   method: 'DELETE',<br>   headers: {<br>     'Accept':'application/json',<br>     'Content-Type':'application/json'<br>   }<br>  })<br>  .then(response =&gt; response.data)<br>}</pre>\n<p>6. Finally we will add bootstrap for rendering content on Manage students page (Manage.js):</p>\n<pre>let AddModelClose=()=&gt;setAddModalShow(false);<br>let EditModelClose=()=&gt;setEditModalShow(false);</pre>\n<pre>return(<br>    &lt;div className=\"container-fluid side-container\"&gt;<br>    &lt;div className=\"row side-row\" &gt;<br>    &lt;p id=\"manage\"&gt;&lt;/p&gt;<br>        &lt;Table striped bordered hover className=\"react-bootstrap-table\" id=\"dataTable\"&gt;<br>            &lt;thead&gt;<br>            &lt;tr&gt;<br>              &lt;th &gt;ID&lt;/th&gt;<br>              &lt;th&gt;First Name&lt;/th&gt;<br>              &lt;th&gt;Last Name&lt;/th&gt;<br>              &lt;th&gt;Registration No&lt;/th&gt;<br>              &lt;th&gt;Email&lt;/th&gt;<br>              &lt;th&gt;Course&lt;/th&gt;<br>              &lt;th&gt;Action&lt;/th&gt;<br>            &lt;/tr&gt;<br>            &lt;/thead&gt;<br>            &lt;tbody&gt;<br>              { students.map((stu) =&gt;<br><br>              &lt;tr key={stu.id}&gt;<br>              &lt;td&gt;{stu.studentId}&lt;/td&gt;<br>              &lt;td&gt;{stu.FirstName}&lt;/td&gt;<br>              &lt;td&gt;{stu.LastName}&lt;/td&gt;<br>              &lt;td&gt;{stu.RegistrationNo}&lt;/td&gt;<br>              &lt;td&gt;{stu.Email}&lt;/td&gt;<br>              &lt;td&gt;{stu.Course}&lt;/td&gt;<br>              &lt;td&gt;<br><br>              &lt;Button className=\"mr-2\" variant=\"danger\"<br>                onClick={event =&gt; handleDelete(event,stu.studentId)}&gt;<br>                    &lt;RiDeleteBin5Line /&gt;<br>              &lt;/Button&gt;<br>              &lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;<br>              &lt;Button className=\"mr-2\"<br>                onClick={event =&gt; handleUpdate(event,stu)}&gt;<br>                    &lt;FaEdit /&gt;<br>              &lt;/Button&gt;<br>              &lt;UpdateStudentModal show={editModalShow} student={editStudent} setUpdated={setIsUpdated}<br>                          onHide={EditModelClose}&gt;&lt;/UpdateStudentModal&gt;<br>            &lt;/td&gt;<br>            &lt;/tr&gt;)}<br>          &lt;/tbody&gt;<br>        &lt;/Table&gt;<br>        &lt;ButtonToolbar&gt;<br>            &lt;Button variant=\"primary\" onClick={handleAdd}&gt;<br>            Add Student<br>            &lt;/Button&gt;<br>            &lt;AddStudentModal show={addModalShow} setUpdated={setIsUpdated}<br>            onHide={AddModelClose}&gt;&lt;/AddStudentModal&gt;<br>        &lt;/ButtonToolbar&gt;<br>    &lt;/div&gt;<br>    &lt;/div&gt;<br>);</pre>\n<p>In this code you can see that we are calling handlers on button click events e.g. handleUpdate and the logic to update/add students is being handled in UpdateStudentModal and AddStudentModal components which we will implement next.</p>\n<p><strong>AddStudentModal.js</strong></p>\n<ol><li>Add a file named AddStudentModal.js in /src/components with below\u00a0code:</li></ol>\n<pre>import React from 'react';<br>import {Modal, Col, Row, Form, Button} from 'react-bootstrap';<br>import {FormControl, FormGroup, FormLabel} from 'react-bootstrap';<br>import { addStudent } from '../services/StudentService';<br><br><br>const AddStudentModal = (props) =&gt; {<br><br>    const handleSubmit = (e) =&gt; {<br>        e.preventDefault();<br>        addStudent(e.target)<br>        .then((result)=&gt;{<br>            alert(result);<br>            props.setUpdated(true);<br>        },<br>        (error)=&gt;{<br>            alert(\"Failed to Add Student\");<br>        })<br>    }<br><br>    return(<br>        &lt;div className=\"container\"&gt;<br><br>            &lt;Modal<br>                {...props}<br>                size=\"lg\"<br>                aria-labelledby=\"contained-modal-title-vcenter\"<br>                centered &gt;<br><br>                &lt;Modal.Header closeButton&gt;<br>                    &lt;Modal.Title id=\"contained-modal-title-vcenter\"&gt;<br>                        Fill In Student Information<br>                    &lt;/Modal.Title&gt;<br>                &lt;/Modal.Header&gt;<br>                &lt;Modal.Body&gt;<br>                    &lt;Row&gt;<br>                        &lt;Col sm={6}&gt;<br>                            &lt;Form onSubmit={handleSubmit}&gt;<br>                                &lt;Form.Group controlId=\"FirstName\"&gt;<br>                                    &lt;Form.Label&gt;First Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"FirstName\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"LastName\"&gt;<br>                                    &lt;Form.Label&gt;Last Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"LastName\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"RegistrationNo\"&gt;<br>                                    &lt;Form.Label&gt;Registration No.&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"RegistrationNo\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Email\"&gt;<br>                                    &lt;Form.Label&gt;Email&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Email\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Course\"&gt;<br>                                    &lt;Form.Label&gt;Course&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Course\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group&gt;<br>                                &lt;p&gt;&lt;/p&gt;<br>                                &lt;Button variant=\"primary\" type=\"submit\"&gt;<br>                                    Submit<br>                                &lt;/Button&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;/Form&gt;<br>                        &lt;/Col&gt;<br>                    &lt;/Row&gt;<br>                &lt;/Modal.Body&gt;<br>                &lt;Modal.Footer&gt;<br>                &lt;Button variant=\"danger\" type=\"submit\" onClick={props.onHide}&gt;<br>                        Close<br>                &lt;/Button&gt;<br><br>                &lt;/Modal.Footer&gt;<br>            &lt;/Modal&gt;<br>        &lt;/div&gt;<br>    );<br>};<br><br>export default AddStudentModal;</pre>\n<p>Here we are using props for passing students information from Manage.js into AddStudentModal component. Props are used for passing states information from one component to\u00a0other.</p>\n<p>handleSubmit handler will be called once user clicks submit button. This handler will call addStudent service which will call backend endpoint to add student in database.</p>\n<p>2. Add addStudent service in /src/services/StudentService.js\u00a0:</p>\n<pre>export function addStudent(student){<br>  return axios.post('http://127.0.0.1:8000/students/', {<br>    studentId:null,<br>    FirstName:student.FirstName.value,<br>    LastName:student.LastName.value,<br>    RegistrationNo:student.RegistrationNo.value,<br>    Email:student.Email.value,<br>    Course:student.Course.value<br>  })<br>    .then(response=&gt;response.data)<br>}</pre>\n<p><strong>UpdateStudentModal.js</strong></p>\n<ol><li>Add a file named UpdateStudentModal.js in /src/components with below\u00a0code:</li></ol>\n<pre>import React,{Component} from 'react';<br>import {Modal, Col, Row, Form, Button} from 'react-bootstrap';<br>import {FormControl, FormGroup, FormLabel} from 'react-bootstrap';<br>import { updateStudent } from '../services/StudentService';<br><br><br><br>const UpdateStudentModal = (props) =&gt; {<br><br>    const handleSubmit = (e) =&gt; {<br>        e.preventDefault();<br>        updateStudent(props.student.studentId, e.target)<br>        .then((result)=&gt;{<br>            alert(result);<br>            props.setUpdated(true);<br>        },<br>        (error)=&gt;{<br>            alert(\"Failed to Update Student\");<br>        })<br>    };<br><br>    return(<br>        &lt;div className=\"container\"&gt;<br><br>            &lt;Modal<br>                {...props}<br>                size=\"lg\"<br>                aria-labelledby=\"contained-modal-title-vcenter\"<br>                centered &gt;<br><br>                &lt;Modal.Header closeButton&gt;<br>                    &lt;Modal.Title id=\"contained-modal-title-vcenter\"&gt;<br>                        Update Student Information<br>                    &lt;/Modal.Title&gt;<br>                &lt;/Modal.Header&gt;<br>                &lt;Modal.Body&gt;<br>                    &lt;Row&gt;<br>                        &lt;Col sm={6}&gt;<br>                            &lt;Form onSubmit={handleSubmit}&gt;<br>                                &lt;Form.Group controlId=\"FirstName\"&gt;<br>                                    &lt;Form.Label&gt;First Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"FirstName\" required defaultValue={props.student.FirstName} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br><br>                            &lt;Form.Group controlId=\"LastName\"&gt;<br>                                    &lt;Form.Label&gt;Last Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"LastName\" required defaultValue={props.student.LastName} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"RegistrationNo\"&gt;<br>                                    &lt;Form.Label&gt;Registration No.&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"RegistrationNo\" required defaultValue={props.student.RegistrationNo} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Email\"&gt;<br>                                    &lt;Form.Label&gt;Email&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Email\" required defaultValue={props.student.Email} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Course\"&gt;<br>                                    &lt;Form.Label&gt;Course&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Course\" required defaultValue={props.student.Course} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group&gt;<br>                                &lt;p&gt;&lt;/p&gt;<br>                                &lt;Button variant=\"primary\" type=\"submit\"&gt;<br>                                    Submit<br>                                &lt;/Button&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;/Form&gt;<br>                        &lt;/Col&gt;<br>                    &lt;/Row&gt;<br>                &lt;/Modal.Body&gt;<br>                &lt;Modal.Footer&gt;<br>                &lt;Button variant=\"danger\" type=\"submit\" onClick={props.onHide}&gt;<br>                        Close<br>                &lt;/Button&gt;<br><br>                &lt;/Modal.Footer&gt;<br>            &lt;/Modal&gt;<br>        &lt;/div&gt;<br>    );<br>};<br><br><br>export default UpdateStudentModal;</pre>\n<p>2. Add updateStudent service in /src/services/StudentService.js\u00a0:</p>\n<pre>export function updateStudent(stuid, student) {<br>  return axios.put('http://127.0.0.1:8000/students/' + stuid + '/', {<br>    FirstName:student.FirstName.value,<br>    LastName:student.LastName.value,<br>    RegistrationNo:student.RegistrationNo.value,<br>    Email:student.Email.value,<br>    Course:student.Course.value<br>  })<br>   .then(response =&gt; response.data)<br>}</pre>\n<p><strong>Add Manage component in React\u00a0Router</strong></p>\n<ol><li>To render Manage component we will need to add this as a Route in /src/App.js:</li></ol>\n<pre><strong>import Manage from \"./components/Manage\";</strong></pre>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br>      &lt;Routes&gt;<br>         &lt;Route exact path=\"/\" element={&lt;Home/&gt;} /&gt;<br>         &lt;Route path=\"/students\" element={&lt;Students/&gt;} /&gt;<br><strong>&lt;Route path=\"/manage\" element={&lt;Manage/&gt;} /&gt;</strong><br>       &lt;/Routes&gt;<br>    &lt;/BrowserRouter&gt;<br>  );<br>};</pre>\n<h3>Test CRUD Operations</h3>\n<ol><li>Navigate to Manage Students page, it should look like\u00a0this:</li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bp9jFw9Iu1L6h6_pxT-cqw.png\"></figure><p>2. To add a new student, click on Add Student button. This will open add student\u00a0form.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bMa1-qOToa49u5xXxqTudg.png\"></figure><p>3. Fill in the student information and click submit. This will open a popup alert if student is added successfully:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*j_-5gjpEs_aM8aqKXN7dNw.png\"></figure><p>Now if you close the add student Form. You will see that students list is updated without refreshing the page. This is because we are updating students list in useEffect hook whenever a new student is added, deleted or\u00a0updated.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4FwCt4fkHpvYXlKa4sJ-uw.png\"></figure><p>4. Similarly, you can test update and delete operations.</p>\n<h3><strong>Summary:</strong></h3>\n<p>Congratulations, you have completed this tutorial series on developing a CRUD application using Django and React\u00a0Js.</p>\n<p>In this series you\u00a0learned:</p>\n<ol>\n<li>What is REST API, CRUD and HTTP\u00a0Verbs</li>\n<li>Backend development of a CRUD application using Django Rest Framework</li>\n<li>React core concepts e.g. JSX, DOM, components, states, hooks,\u00a0props</li>\n<li>Frontend development of a CRUD application using React\u00a0Js</li>\n<li>Integrating frontend with backend using react axios\u00a0library</li>\n</ol>\n<p>You are now in a position to develop any full stack web application using Django and React. In some later articles we will also learn how you can add unit tests to your Django application and integrate swagger for API documentation.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f3d0d28139af\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In previous articles we learned to <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-1-2e8927a1e0c8\">develop the backend</a> of a simple student management web application using Django REST framework and introduced <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb\">React Core concepts</a>.</p>\n<p>In this article you will write code to develop the frontend of student management app.</p>\n<p>You can get the source code from my GitHub\u00a0repo:</p>\n<p><a href=\"https://github.com/fizaashraf37/smwa-project\">GitHub - fizaashraf37/smwa-project: A simple student management web application with CRUD operations developed in Django and React Js</a></p>\n<p>Watch full step by step tutorial on\u00a0YouTube</p>\n<a href=\"https://medium.com/media/c0cc923f0fc2d2f0d4a1efdcb2503966/href\">https://medium.com/media/c0cc923f0fc2d2f0d4a1efdcb2503966/href</a><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yl4_7966YvNbdDty4zB8dg.png\"></figure><h3>Table of\u00a0Contents</h3>\n<ol>\n<li>Prerequisites</li>\n<li>Create React\u00a0App</li>\n<li>Create TOP Navigation Bar</li>\n<li>Create Side Navigation Bar</li>\n<li>Create Home\u00a0Page</li>\n<li>Create Students List\u00a0Page</li>\n<li>Create Manage Students\u00a0Page</li>\n<li>Test CRUD operations</li>\n<li>Summary</li>\n</ol>\n<h3>Prerequisites</h3>\n<p>Make sure you have a recent version of <a href=\"https://nodejs.org/en/download/\">Node.js</a> installed.</p>\n<p>After installation check if node and npm are installed in your system. Run below commands to check node and npm versions in command\u00a0prompt:</p>\n<p>Check node\u00a0version</p>\n<pre>node --version</pre>\n<p>Check npm\u00a0version</p>\n<pre>npm -version</pre>\n<h3>Create React\u00a0App</h3>\n<p>Open Pycharm project where you created the backend of this app. If you do not want to go through backend part of this app. Then you can clone the backend repository from Github and install python and django to run the\u00a0backend.</p>\n<ol><li>Inside your project directory run this command to create react\u00a0app:</li></ol>\n<pre>npx create-react-app frontend</pre>\n<p>This will take some time to create the app. Your directory structure should look like this once app is\u00a0created:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/345/1*3R7fJ8b-cXmljkwK5ammbQ.png\"></figure><p>2. Navigate to frontend directory:</p>\n<pre>cd frontend</pre>\n<p>3. Run npm start to start the react\u00a0app:</p>\n<pre>npm start</pre>\n<p>This will start the app in your browser <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iR3QRa8yD4dpw-3Vr_JgFg.png\"></figure><p>4. We do not need the starter code generated by React. Delete all the files inside src/ folder except index.js and reportWebVitals.jsfiles.</p>\n<blockquote><em>Note:</em></blockquote>\n<blockquote>\n<strong><em>Don\u2019t delete the entire </em></strong><strong><em>src folder, just the original source files inside it.</em></strong><em> We\u2019ll replace the default source files with examples for this project in the next\u00a0step.</em>\n</blockquote>\n<p>5. Add a file named index.css in the src/ folder with this CSS\u00a0code:</p>\n<pre>body {<br>  font: 14px \"Century Gothic\", Futura, sans-serif;<br>  margin: 0;<br>}</pre>\n<p>6. Take a look at the index.js file\u00a0code</p>\n<pre>import App from './App';<br>import reportWebVitals from './reportWebVitals';<br><br>const root = ReactDOM.createRoot(document.getElementById('root'));<br>root.render(<br>  &lt;React.StrictMode&gt;<br>    &lt;App /&gt;<br>  &lt;/React.StrictMode&gt;<br>);<br><br>// If you want to start measuring performance in your app, pass a function<br>// to log results (for example: reportWebVitals(console.log))<br>// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals<br>reportWebVitals();</pre>\n<p>This index.js file is the starting point of the app. ReactDOM.createRoot() function will create the root element for the react app. root.render() will render the content on web page. &lt;App /&gt;is our main React component which we will define in App.js\u00a0file.</p>\n<p>7. Add a file named App.js in the src/ folder with this JSX\u00a0code:</p>\n<pre>import React from 'react';<br><br>function App() {<br>  return (<br>    &lt;h1&gt; Student Management System App &lt;/h1&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>Now if you will run npm startagain you should see a simple\u00a0heading.</p>\n<pre>npm start</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/851/1*91QY1qX1D6Bgu7NAi8OMtw.png\"></figure><p>Next step is to create React components for Home, Navigation Bar, Students list and Manage Students\u00a0page.</p>\n<p>Create a new directory named components inside src/ folder. Your directory structure should look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/317/1*2QLr9vff_9jIxNr3UKn9jQ.png\"></figure><h3>Create TOP Navigation Bar</h3>\n<p>Now we will start writing the code for top Navigation bar which will remain static for all\u00a0pages.</p>\n<ol><li>We will be using react-bootstrap library for this project. React-Bootstrap <strong>replaces the Bootstrap JavaScript</strong>. Each component has been built from scratch as a true React component, without unneeded dependencies like jQuery. To add react-bootstrap to your project run these commands inside frontend\u00a0folder:</li></ol>\n<pre>npm install bootstrap<br>npm install react-bootstrap</pre>\n<p>This will add bootstrap and react-bootstrap dependencies inside package.json file.</p>\n<p>2. Next we will add some styling to set the width and height of the page at 100% and also add some padding for our\u00a0logo.</p>\n<p>Add a file named App.css in the src/ folder with this\u00a0code:</p>\n<pre>body, html {<br>  height: 100%;<br>  width: 100%;<br>  margin: 0;<br>}<br><br>.app-logo {<br>   padding-left: 50px;<br>}</pre>\n<p>3. We will put all the images and logo files inside static folder. Create a folder named static in the src/ folder and add logo.pngfile in this\u00a0folder.</p>\n<p>4. Add a file named Navigation.js in the src/components/ folder with this\u00a0code:</p>\n<pre>import React from 'react';<br>import {Navbar,Nav} from 'react-bootstrap';<br>import logo from '../static/logo.png'<br>import \"../App.css\";<br><br><br>const Navigation = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>    &lt;Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" id=\"my-nav\"&gt;<br>        &lt;Navbar.Brand className=\"app-logo\" href=\"/\"&gt;<br>            &lt;img<br>              src={logo}<br>              width=\"40\"<br>              height=\"50\"<br>              className=\"d-inline-block align-center\"<br>              alt=\"React Bootstrap logo\"<br>            /&gt;{' '}<br>            Student Management System<br>        &lt;/Navbar.Brand&gt;<br>    &lt;/Navbar&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default Navigation;</pre>\n<p>Now if you refresh the browser, you will still see the old page. The Navigation bar is not being rendered. It is because we have not added this component in our main App component. To render each component we need to add this inside our App.js\u00a0file.</p>\n<p>4. Add these lines below import React from react; in src/App.js file:</p>\n<pre>import React from 'react';<br>import 'bootstrap/dist/css/bootstrap.min.css';<br>import Navigation from \"./components/Navigation\";</pre>\n<p>Here we are importing bootstrap styling and Navigation component from components folder that we just created inside\u00a0App.js.</p>\n<p>5. Add below code in src/App.js to render Navigation component:</p>\n<pre>function App() {<br>  return (<br>      &lt;Navigation /&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>Your screen should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nK6cIdPKAWypIJ_0MWgF9g.png\"></figure><h3>Create Side Navigation Bar</h3>\n<ol><li>For side navigation bar we will use cdbreact library. Install this library using below\u00a0command:</li></ol>\n<pre>npm install cdbreact</pre>\n<p>2. Import NavLink and cdbreact components inside src/components/Navigation.js. We will use NavLink to navigate to different pages e.g Home, Students List or Manage students and use cdbreact to create\u00a0Sidebar.</p>\n<pre>import {NavLink} from 'react-router-dom';<br>import {<br>  CDBSidebar,<br>  CDBSidebarContent,<br>  CDBSidebarFooter,<br>  CDBSidebarHeader,<br>  CDBSidebarMenu,<br>  CDBSidebarMenuItem,<br>} from 'cdbreact';</pre>\n<p>3. Add code for sidebar in Navigation.js file below line &lt;/Navbar&gt;</p>\n<pre>&lt;div className='sidebar'&gt;<br>&lt;CDBSidebar textColor=\"#333\" backgroundColor=\"#f0f0f0\"&gt;<br>    &lt;CDBSidebarHeader prefix={&lt;i className=\"fa fa-bars\" /&gt;}&gt;<br>      Navigation<br>    &lt;/CDBSidebarHeader&gt;<br>    &lt;CDBSidebarContent&gt;<br>      &lt;CDBSidebarMenu&gt;<br>        &lt;NavLink exact to=\"/\" activeClassName=\"activeClicked\"&gt;<br>          &lt;CDBSidebarMenuItem icon=\"home\"&gt;Home&lt;/CDBSidebarMenuItem&gt;<br>        &lt;/NavLink&gt;<br>        &lt;NavLink exact to=\"/student\" activeClassName=\"activeClicked\"&gt;<br>          &lt;CDBSidebarMenuItem icon=\"list\"&gt;Students List&lt;/CDBSidebarMenuItem&gt;<br>        &lt;/NavLink&gt;<br>        &lt;NavLink exact to=\"/manage\" activeClassName=\"activeClicked\"&gt;<br>          &lt;CDBSidebarMenuItem icon=\"user\"&gt;Manage Students&lt;/CDBSidebarMenuItem&gt;<br>        &lt;/NavLink&gt;<br>      &lt;/CDBSidebarMenu&gt;<br>    &lt;/CDBSidebarContent&gt;<br>  &lt;/CDBSidebar&gt;<br>&lt;/div&gt;</pre>\n<p>Your final Navigation.js file should look like\u00a0this:</p>\n<pre>import React from 'react';<br>import {<br>  CDBSidebar,<br>  CDBSidebarContent,<br>  CDBSidebarHeader,<br>  CDBSidebarMenu,<br>  CDBSidebarMenuItem,<br>} from 'cdbreact';<br>import {NavLink} from 'react-router-dom';<br>import {Navbar} from 'react-bootstrap';<br>import logo from '../static/logo.png';<br>import \"../App.css\";<br><br><br>const Navigation = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>    &lt;Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" id=\"my-nav\"&gt;<br>        &lt;Navbar.Brand className=\"app-logo\" href=\"/\"&gt;<br>            &lt;img<br>              src={logo}<br>              width=\"40\"<br>              height=\"50\"<br>              className=\"d-inline-block align-center\"<br>              alt=\"React Bootstrap logo\"<br>            /&gt;{' '}<br>            Student Management System<br>        &lt;/Navbar.Brand&gt;<br>    &lt;/Navbar&gt;<br>    &lt;div className='sidebar'&gt;<br>    &lt;CDBSidebar textColor=\"#333\" backgroundColor=\"#f0f0f0\"&gt;<br>        &lt;CDBSidebarHeader prefix={&lt;i className=\"fa fa-bars\" /&gt;}&gt;<br>          Navigation<br>        &lt;/CDBSidebarHeader&gt;<br>        &lt;CDBSidebarContent&gt;<br>          &lt;CDBSidebarMenu&gt;<br>            &lt;NavLink exact to=\"/\" activeClassName=\"activeClicked\"&gt;<br>              &lt;CDBSidebarMenuItem icon=\"home\"&gt;Home&lt;/CDBSidebarMenuItem&gt;<br>            &lt;/NavLink&gt;<br>            &lt;NavLink exact to=\"/students\" activeClassName=\"activeClicked\"&gt;<br>              &lt;CDBSidebarMenuItem icon=\"list\"&gt;Students List&lt;/CDBSidebarMenuItem&gt;<br>            &lt;/NavLink&gt;<br>            &lt;NavLink exact to=\"/manage\" activeClassName=\"activeClicked\"&gt;<br>              &lt;CDBSidebarMenuItem icon=\"user\"&gt;Manage Students&lt;/CDBSidebarMenuItem&gt;<br>            &lt;/NavLink&gt;<br>          &lt;/CDBSidebarMenu&gt;<br>        &lt;/CDBSidebarContent&gt;<br>      &lt;/CDBSidebar&gt;<br>    &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default Navigation;</pre>\n<p>4. For side Navbar we are using className='sidebar'.We need to define this class inside our src/App.css file:</p>\n<pre>.sidebar {<br>   display: flex;<br>   height: 100vh;<br>   float: left;<br>   overflow: 'scroll initial';<br>}</pre>\n<p>5. For NavLink to work, we will need to import BroswseRouter component in our src/App.js file:</p>\n<pre>import {BrowserRouter} from 'react-router-dom';</pre>\n<p>6. Update function App()code with below code in\u00a0App.js:</p>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br>    &lt;/BrowserRouter&gt;<br>  );<br>}</pre>\n<p>7. Now if you will refresh the page, it should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/977/1*GlEAuwmxyQc8uKvhmH5rVQ.png\"></figure><h3>Create Home\u00a0Page</h3>\n<p>Our home page is a simple image slider. For image slider we will use react-bootstrap Carouselcomponent.</p>\n<ol><li>Add a file named Home.js inside /src/components folder with this\u00a0code:</li></ol>\n<pre>import slide01 from '../static/slide01.jpg'<br>import slide02 from '../static/slide02.jpg'<br>import slide03 from '../static/slide03.jpg'<br><br>import Carousel from 'react-bootstrap/Carousel';<br><br>const Home = () =&gt; {<br>  return (<br>  &lt;div className=\"row\"&gt;<br>    &lt;Carousel variant=\"dark\"&gt;<br>      &lt;Carousel.Item&gt;<br>        &lt;img<br>          className=\"d-block w-100\"<br>          src={slide01}<br>          alt=\"First slide\"<br>        /&gt;<br>      &lt;/Carousel.Item&gt;<br>      &lt;Carousel.Item&gt;<br>        &lt;img<br>          className=\"d-block w-100\"<br>          src={slide03}<br>          alt=\"Second slide\"<br>        /&gt;<br>      &lt;/Carousel.Item&gt;<br>      &lt;Carousel.Item&gt;<br>        &lt;img<br>          className=\"d-block w-100\"<br>          src={slide02}<br>          alt=\"Third slide\"<br>        /&gt;<br>      &lt;/Carousel.Item&gt;<br>    &lt;/Carousel&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default Home;</pre>\n<p>2. Add files slide01.jpg, slide02.jpg and slide03.jpg inside/src/static folder.</p>\n<p>3. We need to add Home component inside App.js file for this to render. But before that we need to install react-router library as we will be using React Router to route to different pages.</p>\n<pre>npm install react-router<br>npm install react-router-dom</pre>\n<p>4. Add Home component as a Route inside App.js\u00a0file:</p>\n<pre><strong>import Home from \"./components/Home\";<br>import {</strong>BrowserRouter<strong>, Route, Routes} from 'react-router-dom';</strong></pre>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br><strong>&lt;Routes&gt;<br>         &lt;Route exact path=\"/\" element={&lt;Home/&gt;} /&gt;<br>       &lt;/Routes&gt;</strong><br>    &lt;/BrowserRouter&gt;<br>  );<br>}</pre>\n<p>5. Now if you will do npm startand refresh the page, it should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IpTd_pdbG90234SHY7KPlg.png\"></figure><p>If you navigate to Students List or Manage Students page, you should see empty pages. Lets start developing these\u00a0pages.</p>\n<h3>Create Students List\u00a0Page</h3>\n<p>We will get the students list from our backend API that we developed in first part of this tutorial. To call the API from react, we will create a StudentService.</p>\n<ol><li>Create a folder named servicesinside /srcfolder and a add a file named StudentService.jsinside /src/servicesfolder with this\u00a0code:</li></ol>\n<pre>import axios from 'axios';<br><br>export function getStudents() {<br>  return axios.get('http://127.0.0.1:8000/students/')<br>    .then(response =&gt; response.data)<br>}</pre>\n<p>Here we are creating a function getStudents()which is calling our backend API endpoint /students to fetch list of students from backend. We are using axios library for this. Install this library using below\u00a0command:</p>\n<pre>npm install axios</pre>\n<p>2. Add styling for this component inside App.css\u00a0file:</p>\n<pre>.side-container {<br>   padding-top: 30px;<br>}<br><br>.side-row {<br>   padding: 30px;<br>}<br><br>.react-bootstrap-table thead { <br>    position: sticky; <br>    top: 0; <br>    background-color: #333; <br>    z-index: 1021; <br>    color: white; <br>}</pre>\n<p>3. Add a file named Students.js inside /src/components folder with below\u00a0code:</p>\n<pre>import React, { useEffect, useState } from 'react';<br>import { Table } from 'react-bootstrap';<br>import { getStudents } from '../services/StudentService';<br>import \"../App.css\";<br><br>const Students = () =&gt; {<br>  const [students, setStudents] = useState([]);<br><br>  useEffect(() =&gt; {<br>   let mounted = true;<br>   getStudents()<br>     .then(data =&gt; {<br>       if(mounted) {<br>         setStudents(data)<br>       }<br>     })<br>   return () =&gt; mounted = false;<br> }, [])<br><br>  return(<br>   &lt;div className=\"container-fluid side-container\"&gt;<br>   &lt;div className=\"row side-row\" &gt;<br>    &lt;p id=\"before-table\"&gt;&lt;/p&gt;<br>        &lt;Table striped bordered hover className=\"react-bootstrap-table\" id=\"dataTable\"&gt;<br>        &lt;thead&gt;<br>            &lt;tr&gt;<br>            &lt;th&gt;ID&lt;/th&gt;<br>            &lt;th&gt;First Name&lt;/th&gt;<br>            &lt;th&gt;Last Name&lt;/th&gt;<br>            &lt;th&gt;Registration No&lt;/th&gt;<br>            &lt;th&gt;Email&lt;/th&gt;<br>            &lt;th&gt;Course&lt;/th&gt;<br>            &lt;/tr&gt;<br>        &lt;/thead&gt;<br>        &lt;tbody&gt;<br>            {students.map((stu) =&gt;<br>            &lt;tr key={stu.id}&gt;<br>                &lt;td&gt;{stu.studentId}&lt;/td&gt;<br>                &lt;td&gt;{stu.FirstName}&lt;/td&gt;<br>                &lt;td&gt;{stu.LastName}&lt;/td&gt;<br>                &lt;td&gt;{stu.RegistrationNo}&lt;/td&gt;<br>                &lt;td&gt;{stu.Email}&lt;/td&gt;<br>                &lt;td&gt;{stu.Course}&lt;/td&gt;<br>            &lt;/tr&gt;)}<br>        &lt;/tbody&gt;<br>    &lt;/Table&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  );<br>};<br><br>export default Students;</pre>\n<p>In first line of function Students(), we are using a react state students and initializing this state to empty array using react hook useState:</p>\n<pre>const [students, setStudents] = useState([]);</pre>\n<p>useEffect hook is calling getStudents service that we defined inside StudentService.js file. This will be called every time page is refreshed or\u00a0loaded.</p>\n<p>4. Finally, we will add a route for Students component inside\u00a0App.js:</p>\n<pre><strong>import Students from \"./components/Students\";</strong></pre>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br>      &lt;Routes&gt;<br>         &lt;Route exact path=\"/\" element={&lt;Home/&gt;} /&gt;<br><strong>&lt;Route path=\"/students\" element={&lt;Students/&gt;} /&gt;</strong><br>       &lt;/Routes&gt;<br>    &lt;/BrowserRouter&gt;<br>  );<br>}</pre>\n<p>5. Now if you refresh the page and navigate to Students List page, you should get the data from backend. And it should render on frontend. If any new object is added or deleted from backend and page is refreshed on frontend, then you will see the changes on frontend.</p>\n<p>6. If you do not see any data, then make sure that backend service is up. To start the backend navigate to backend directory and start django\u00a0server:</p>\n<pre>cd backend<br>python manage.py runserver</pre>\n<p>If you still do not get the data, then inspect the API call. Right click on students list page and click inspect. In opened window go inside Netwroktab and refresh students list page. If you get CORS errorin status field then you need to fix this from backend. This error usually happens if Cross-Origin Resource Sharing is not allowed by backend server. In that case AllowOrigin header is usually missing in the response. To allow javascript to read response data from API, Cross-Origin Resource Sharing must be allowed by backend\u00a0server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KXc0ejSojElecYAfgqQqFA.png\"></figure><p>In backend/settings.py file make sure these settings are\u00a0set:</p>\n<p>i) Check if \u2019corsheaders' is added in INSTALLED_APPS:</p>\n<pre>INSTALLED_APPS = [<br>    'django.contrib.admin',<br>    'django.contrib.auth',<br>    'django.contrib.contenttypes',<br>    'django.contrib.sessions',<br>    'django.contrib.messages',<br>    'django.contrib.staticfiles',<br>    'backend',<br><strong>'corsheaders',</strong><br>    'rest_framework',<br>]</pre>\n<p>ii) Check if CORS_ORIGIN_ALLOW_ALL = True is\u00a0set:</p>\n<pre>CORS_ORIGIN_ALLOW_ALL = True</pre>\n<p>iii) Check if 'corsheaders.middleware.CorsMiddleware'is added in MIDDLEWARE:</p>\n<pre><strong>CORS_ORIGIN_ALLOW_ALL = True</strong><br><br>MIDDLEWARE = [<br><strong>'corsheaders.middleware.CorsMiddleware',</strong><br>    'django.middleware.security.SecurityMiddleware',<br>    'django.contrib.sessions.middleware.SessionMiddleware',<br>    'django.middleware.common.CommonMiddleware',<br>    'django.middleware.csrf.CsrfViewMiddleware',<br>    'django.contrib.auth.middleware.AuthenticationMiddleware',<br>    'django.contrib.messages.middleware.MessageMiddleware',<br>    'django.middleware.clickjacking.XFrameOptionsMiddleware',<br>]</pre>\n<p>7. Now if you will refresh the students list page you should see that data is rendered:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TbuAS_NbkPia-h8YTsW4dQ.png\"></figure><h3>Create Manage Students\u00a0Page</h3>\n<p>We need to write the functionality for add student, update student and delete student. We will create separate components for these. We will also need to install react-icons library as we will be using delete and update icons from this\u00a0library.</p>\n<pre>npm install react-cions</pre>\n<p><strong>Create Manage.js</strong></p>\n<ol>\n<li>Add a file named Manage.js in /src/components folder</li>\n<li>Add these imports in Manage.js file:</li>\n</ol>\n<pre>import React,{ useEffect, useState } from 'react';<br>import {Table} from 'react-bootstrap';<br><br>import {Button,ButtonToolbar } from 'react-bootstrap';<br>import { FaEdit } from 'react-icons/fa';<br>import { RiDeleteBin5Line } from 'react-icons/ri';<br>import { getStudents, deleteStudent } from '../services/StudentService';<br>import AddStudentModal from \"./AddStudentModal\";<br>import UpdateStudentModal from \"./UpdateStudentModal\";</pre>\n<p>We are using useState hook for managing states e.g. for updating students list when a new student is added or deleted. useEffect state will be used for managing events e.g. updating page contents when a student is added or\u00a0deleted.</p>\n<p>We will add components for AddStudentModal and updateStudentModal later.</p>\n<p>3. Add these states in Manage.js file:</p>\n<pre>const Manage = () =&gt; {<br>    const [students, setStudents] = useState([]);<br>    const [addModalShow, setAddModalShow] = useState(false);<br>    const [editModalShow, setEditModalShow] = useState(false);<br>    const [editStudent, setEditStudent] = useState([]);<br>    const [isUpdated, setIsUpdated] = useState(false);<br>};<br><br>export default Manage;</pre>\n<p>4. Add useEffect hook in Manage.js:</p>\n<pre>useEffect(() =&gt; {<br>   let mounted = true;<br>   if(students.length &amp;&amp; !isUpdated) {<br>    return;<br>    }<br>   getStudents()<br>     .then(data =&gt; {<br>       if(mounted) {<br>         setStudents(data);<br>       }<br>     })<br>   return () =&gt; {<br>      mounted = false;<br>      setIsUpdated(false);<br>   }<br> }, [isUpdated, students])</pre>\n<p>In this hook we are checking if the students list is updated on backend due to any CRUD operation then we will update the students state and re-render the updated list. We will also update the state and re-render whenever page is refreshed or loaded. We are handling this using mounted\u00a0flag.</p>\n<p>5. Next we will add handlers for handling update, add and delete\u00a0events:</p>\n<pre>const handleUpdate = (e, stu) =&gt; {<br>    e.preventDefault();<br>    setEditModalShow(true);<br>    setEditStudent(stu);<br>};</pre>\n<p>Here, whenever use will click update button, we will call handleUpdate handler on button click event. This handler will set some states i.e. it will enable edit student form for editing\u00a0student.</p>\n<p>Similarly we can add Add and Delete handlers:</p>\n<pre>const handleAdd = (e) =&gt; {<br>    e.preventDefault();<br>    setAddModalShow(true);<br>};<br><br>const handleDelete = (e, studentId) =&gt; {<br>    if(window.confirm('Are you sure ?')){<br>        e.preventDefault();<br>        deleteStudent(studentId)<br>        .then((result)=&gt;{<br>            alert(result);<br>            setIsUpdated(true);<br>        },<br>        (error)=&gt;{<br>            alert(\"Failed to Delete Student\");<br>        })<br>    }<br>};</pre>\n<p>In handleDelete we are calling deleteStudent service which we will define in /src/services/StudentService.js file:</p>\n<pre>export function deleteStudent(studentId) {<br>  return axios.delete('http://127.0.0.1:8000/students/' + studentId + '/', {<br>   method: 'DELETE',<br>   headers: {<br>     'Accept':'application/json',<br>     'Content-Type':'application/json'<br>   }<br>  })<br>  .then(response =&gt; response.data)<br>}</pre>\n<p>6. Finally we will add bootstrap for rendering content on Manage students page (Manage.js):</p>\n<pre>let AddModelClose=()=&gt;setAddModalShow(false);<br>let EditModelClose=()=&gt;setEditModalShow(false);</pre>\n<pre>return(<br>    &lt;div className=\"container-fluid side-container\"&gt;<br>    &lt;div className=\"row side-row\" &gt;<br>    &lt;p id=\"manage\"&gt;&lt;/p&gt;<br>        &lt;Table striped bordered hover className=\"react-bootstrap-table\" id=\"dataTable\"&gt;<br>            &lt;thead&gt;<br>            &lt;tr&gt;<br>              &lt;th &gt;ID&lt;/th&gt;<br>              &lt;th&gt;First Name&lt;/th&gt;<br>              &lt;th&gt;Last Name&lt;/th&gt;<br>              &lt;th&gt;Registration No&lt;/th&gt;<br>              &lt;th&gt;Email&lt;/th&gt;<br>              &lt;th&gt;Course&lt;/th&gt;<br>              &lt;th&gt;Action&lt;/th&gt;<br>            &lt;/tr&gt;<br>            &lt;/thead&gt;<br>            &lt;tbody&gt;<br>              { students.map((stu) =&gt;<br><br>              &lt;tr key={stu.id}&gt;<br>              &lt;td&gt;{stu.studentId}&lt;/td&gt;<br>              &lt;td&gt;{stu.FirstName}&lt;/td&gt;<br>              &lt;td&gt;{stu.LastName}&lt;/td&gt;<br>              &lt;td&gt;{stu.RegistrationNo}&lt;/td&gt;<br>              &lt;td&gt;{stu.Email}&lt;/td&gt;<br>              &lt;td&gt;{stu.Course}&lt;/td&gt;<br>              &lt;td&gt;<br><br>              &lt;Button className=\"mr-2\" variant=\"danger\"<br>                onClick={event =&gt; handleDelete(event,stu.studentId)}&gt;<br>                    &lt;RiDeleteBin5Line /&gt;<br>              &lt;/Button&gt;<br>              &lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;<br>              &lt;Button className=\"mr-2\"<br>                onClick={event =&gt; handleUpdate(event,stu)}&gt;<br>                    &lt;FaEdit /&gt;<br>              &lt;/Button&gt;<br>              &lt;UpdateStudentModal show={editModalShow} student={editStudent} setUpdated={setIsUpdated}<br>                          onHide={EditModelClose}&gt;&lt;/UpdateStudentModal&gt;<br>            &lt;/td&gt;<br>            &lt;/tr&gt;)}<br>          &lt;/tbody&gt;<br>        &lt;/Table&gt;<br>        &lt;ButtonToolbar&gt;<br>            &lt;Button variant=\"primary\" onClick={handleAdd}&gt;<br>            Add Student<br>            &lt;/Button&gt;<br>            &lt;AddStudentModal show={addModalShow} setUpdated={setIsUpdated}<br>            onHide={AddModelClose}&gt;&lt;/AddStudentModal&gt;<br>        &lt;/ButtonToolbar&gt;<br>    &lt;/div&gt;<br>    &lt;/div&gt;<br>);</pre>\n<p>In this code you can see that we are calling handlers on button click events e.g. handleUpdate and the logic to update/add students is being handled in UpdateStudentModal and AddStudentModal components which we will implement next.</p>\n<p><strong>AddStudentModal.js</strong></p>\n<ol><li>Add a file named AddStudentModal.js in /src/components with below\u00a0code:</li></ol>\n<pre>import React from 'react';<br>import {Modal, Col, Row, Form, Button} from 'react-bootstrap';<br>import {FormControl, FormGroup, FormLabel} from 'react-bootstrap';<br>import { addStudent } from '../services/StudentService';<br><br><br>const AddStudentModal = (props) =&gt; {<br><br>    const handleSubmit = (e) =&gt; {<br>        e.preventDefault();<br>        addStudent(e.target)<br>        .then((result)=&gt;{<br>            alert(result);<br>            props.setUpdated(true);<br>        },<br>        (error)=&gt;{<br>            alert(\"Failed to Add Student\");<br>        })<br>    }<br><br>    return(<br>        &lt;div className=\"container\"&gt;<br><br>            &lt;Modal<br>                {...props}<br>                size=\"lg\"<br>                aria-labelledby=\"contained-modal-title-vcenter\"<br>                centered &gt;<br><br>                &lt;Modal.Header closeButton&gt;<br>                    &lt;Modal.Title id=\"contained-modal-title-vcenter\"&gt;<br>                        Fill In Student Information<br>                    &lt;/Modal.Title&gt;<br>                &lt;/Modal.Header&gt;<br>                &lt;Modal.Body&gt;<br>                    &lt;Row&gt;<br>                        &lt;Col sm={6}&gt;<br>                            &lt;Form onSubmit={handleSubmit}&gt;<br>                                &lt;Form.Group controlId=\"FirstName\"&gt;<br>                                    &lt;Form.Label&gt;First Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"FirstName\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"LastName\"&gt;<br>                                    &lt;Form.Label&gt;Last Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"LastName\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"RegistrationNo\"&gt;<br>                                    &lt;Form.Label&gt;Registration No.&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"RegistrationNo\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Email\"&gt;<br>                                    &lt;Form.Label&gt;Email&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Email\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Course\"&gt;<br>                                    &lt;Form.Label&gt;Course&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Course\" required placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group&gt;<br>                                &lt;p&gt;&lt;/p&gt;<br>                                &lt;Button variant=\"primary\" type=\"submit\"&gt;<br>                                    Submit<br>                                &lt;/Button&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;/Form&gt;<br>                        &lt;/Col&gt;<br>                    &lt;/Row&gt;<br>                &lt;/Modal.Body&gt;<br>                &lt;Modal.Footer&gt;<br>                &lt;Button variant=\"danger\" type=\"submit\" onClick={props.onHide}&gt;<br>                        Close<br>                &lt;/Button&gt;<br><br>                &lt;/Modal.Footer&gt;<br>            &lt;/Modal&gt;<br>        &lt;/div&gt;<br>    );<br>};<br><br>export default AddStudentModal;</pre>\n<p>Here we are using props for passing students information from Manage.js into AddStudentModal component. Props are used for passing states information from one component to\u00a0other.</p>\n<p>handleSubmit handler will be called once user clicks submit button. This handler will call addStudent service which will call backend endpoint to add student in database.</p>\n<p>2. Add addStudent service in /src/services/StudentService.js\u00a0:</p>\n<pre>export function addStudent(student){<br>  return axios.post('http://127.0.0.1:8000/students/', {<br>    studentId:null,<br>    FirstName:student.FirstName.value,<br>    LastName:student.LastName.value,<br>    RegistrationNo:student.RegistrationNo.value,<br>    Email:student.Email.value,<br>    Course:student.Course.value<br>  })<br>    .then(response=&gt;response.data)<br>}</pre>\n<p><strong>UpdateStudentModal.js</strong></p>\n<ol><li>Add a file named UpdateStudentModal.js in /src/components with below\u00a0code:</li></ol>\n<pre>import React,{Component} from 'react';<br>import {Modal, Col, Row, Form, Button} from 'react-bootstrap';<br>import {FormControl, FormGroup, FormLabel} from 'react-bootstrap';<br>import { updateStudent } from '../services/StudentService';<br><br><br><br>const UpdateStudentModal = (props) =&gt; {<br><br>    const handleSubmit = (e) =&gt; {<br>        e.preventDefault();<br>        updateStudent(props.student.studentId, e.target)<br>        .then((result)=&gt;{<br>            alert(result);<br>            props.setUpdated(true);<br>        },<br>        (error)=&gt;{<br>            alert(\"Failed to Update Student\");<br>        })<br>    };<br><br>    return(<br>        &lt;div className=\"container\"&gt;<br><br>            &lt;Modal<br>                {...props}<br>                size=\"lg\"<br>                aria-labelledby=\"contained-modal-title-vcenter\"<br>                centered &gt;<br><br>                &lt;Modal.Header closeButton&gt;<br>                    &lt;Modal.Title id=\"contained-modal-title-vcenter\"&gt;<br>                        Update Student Information<br>                    &lt;/Modal.Title&gt;<br>                &lt;/Modal.Header&gt;<br>                &lt;Modal.Body&gt;<br>                    &lt;Row&gt;<br>                        &lt;Col sm={6}&gt;<br>                            &lt;Form onSubmit={handleSubmit}&gt;<br>                                &lt;Form.Group controlId=\"FirstName\"&gt;<br>                                    &lt;Form.Label&gt;First Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"FirstName\" required defaultValue={props.student.FirstName} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br><br>                            &lt;Form.Group controlId=\"LastName\"&gt;<br>                                    &lt;Form.Label&gt;Last Name&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"LastName\" required defaultValue={props.student.LastName} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"RegistrationNo\"&gt;<br>                                    &lt;Form.Label&gt;Registration No.&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"RegistrationNo\" required defaultValue={props.student.RegistrationNo} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Email\"&gt;<br>                                    &lt;Form.Label&gt;Email&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Email\" required defaultValue={props.student.Email} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group controlId=\"Course\"&gt;<br>                                    &lt;Form.Label&gt;Course&lt;/Form.Label&gt;<br>                                    &lt;Form.Control type=\"text\" name=\"Course\" required defaultValue={props.student.Course} placeholder=\"\" /&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;Form.Group&gt;<br>                                &lt;p&gt;&lt;/p&gt;<br>                                &lt;Button variant=\"primary\" type=\"submit\"&gt;<br>                                    Submit<br>                                &lt;/Button&gt;<br>                            &lt;/Form.Group&gt;<br>                            &lt;/Form&gt;<br>                        &lt;/Col&gt;<br>                    &lt;/Row&gt;<br>                &lt;/Modal.Body&gt;<br>                &lt;Modal.Footer&gt;<br>                &lt;Button variant=\"danger\" type=\"submit\" onClick={props.onHide}&gt;<br>                        Close<br>                &lt;/Button&gt;<br><br>                &lt;/Modal.Footer&gt;<br>            &lt;/Modal&gt;<br>        &lt;/div&gt;<br>    );<br>};<br><br><br>export default UpdateStudentModal;</pre>\n<p>2. Add updateStudent service in /src/services/StudentService.js\u00a0:</p>\n<pre>export function updateStudent(stuid, student) {<br>  return axios.put('http://127.0.0.1:8000/students/' + stuid + '/', {<br>    FirstName:student.FirstName.value,<br>    LastName:student.LastName.value,<br>    RegistrationNo:student.RegistrationNo.value,<br>    Email:student.Email.value,<br>    Course:student.Course.value<br>  })<br>   .then(response =&gt; response.data)<br>}</pre>\n<p><strong>Add Manage component in React\u00a0Router</strong></p>\n<ol><li>To render Manage component we will need to add this as a Route in /src/App.js:</li></ol>\n<pre><strong>import Manage from \"./components/Manage\";</strong></pre>\n<pre>function App() {<br>  return (<br>    &lt;BrowserRouter&gt;<br>      &lt;Navigation /&gt;<br>      &lt;Routes&gt;<br>         &lt;Route exact path=\"/\" element={&lt;Home/&gt;} /&gt;<br>         &lt;Route path=\"/students\" element={&lt;Students/&gt;} /&gt;<br><strong>&lt;Route path=\"/manage\" element={&lt;Manage/&gt;} /&gt;</strong><br>       &lt;/Routes&gt;<br>    &lt;/BrowserRouter&gt;<br>  );<br>};</pre>\n<h3>Test CRUD Operations</h3>\n<ol><li>Navigate to Manage Students page, it should look like\u00a0this:</li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bp9jFw9Iu1L6h6_pxT-cqw.png\"></figure><p>2. To add a new student, click on Add Student button. This will open add student\u00a0form.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bMa1-qOToa49u5xXxqTudg.png\"></figure><p>3. Fill in the student information and click submit. This will open a popup alert if student is added successfully:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*j_-5gjpEs_aM8aqKXN7dNw.png\"></figure><p>Now if you close the add student Form. You will see that students list is updated without refreshing the page. This is because we are updating students list in useEffect hook whenever a new student is added, deleted or\u00a0updated.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4FwCt4fkHpvYXlKa4sJ-uw.png\"></figure><p>4. Similarly, you can test update and delete operations.</p>\n<h3><strong>Summary:</strong></h3>\n<p>Congratulations, you have completed this tutorial series on developing a CRUD application using Django and React\u00a0Js.</p>\n<p>In this series you\u00a0learned:</p>\n<ol>\n<li>What is REST API, CRUD and HTTP\u00a0Verbs</li>\n<li>Backend development of a CRUD application using Django Rest Framework</li>\n<li>React core concepts e.g. JSX, DOM, components, states, hooks,\u00a0props</li>\n<li>Frontend development of a CRUD application using React\u00a0Js</li>\n<li>Integrating frontend with backend using react axios\u00a0library</li>\n</ol>\n<p>You are now in a position to develop any full stack web application using Django and React. In some later articles we will also learn how you can add unit tests to your Django application and integrate swagger for API documentation.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f3d0d28139af\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["django","full-stack","rest-api","reactjs","django-rest-framework"]},{"title":"Develop a CRUD Application using Django and React (Part 2)","pubDate":"2022-10-16 14:22:19","link":"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb?source=rss-fc853dc52440------2","guid":"https://medium.com/p/d5158c472fcb","author":"Fizaashraf","thumbnail":"","description":"\n<p>In <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-1-2e8927a1e0c8\">previous article</a> you learned to develop the backend part of a simple student management web application using Django REST framework. In this article you will learn to develop the Frontend part of this app using React\u00a0JS.</p>\n<p>Before we start coding, let just go through some basic concepts of React Js. If you are already familiar with these concepts then you can directly jump to <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af\">part\u00a03</a>.</p>\n<a href=\"https://medium.com/media/e26c2b0d82977fd828b6178a62c5a917/href\">https://medium.com/media/e26c2b0d82977fd828b6178a62c5a917/href</a><h3><strong>Intro to React\u00a0Js</strong></h3>\n<p>React is a free and open-source front-end JavaScript library for building user interfaces based on UI components. It is maintained by Meta and a community of individual developers and companies.</p>\n<p>React uses <strong>JSX</strong> syntax. JSX is a React extension to the JavaScript language syntax which provides a way to structure component rendering using syntax familiar to many developers. It is similar in appearance to\u00a0HTML.</p>\n<h3><strong>What is\u00a0DOM?</strong></h3>\n<p>When a web page is loaded, the browser creates a <strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel of the\u00a0page.</p>\n<p>The <strong>HTML DOM</strong> model is constructed as a tree of\u00a0<strong>Objects</strong>:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/897/1*kcjcsg0KcJA_R5aFq3s2RQ.png\"></figure><p><strong><em>The W3C Document Object Model (DOM) is an API that allows programs and scripts to dynamically access and update the content, structure, and style of a document.</em></strong></p>\n<h3><strong>What is ReactDOM?</strong></h3>\n<p>ReactDOM is a package that provides DOM specific methods that can be used at the top level of a web app to enable an efficient way of managing DOM elements of the web page. ReactDOM provides the developers with an API containing the following methods and a few\u00a0more.</p>\n<ul>\n<li>render()</li>\n<li>findDOMNode()</li>\n<li>unmountComponentAtNode()</li>\n<li>hydrate()</li>\n<li>createPortal()</li>\n</ul>\n<p>To use the ReactDOM in any React web app we must first import ReactDOM from the react-dom package by using the following code\u00a0snippet:</p>\n<pre>import ReactDOM from 'react-dom'</pre>\n<h3>React Components</h3>\n<p>Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return\u00a0HTML.</p>\n<p>Components come in two types, Class components and Function components. We will develop our app using Function components.</p>\n<p><em>In older React code bases, you may find Class components primarily used. It is now suggested to use Function components along with Hooks, which were added in React\u00a016.8.</em></p>\n<h4>Class Component</h4>\n<p>A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.</p>\n<p>The component also requires a render() method, this method returns\u00a0HTML.</p>\n<pre>class Car extends React.Component {<br>  render() {<br>    return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;<br>  }<br>}</pre>\n<h4>Function Component</h4>\n<p>Here is the same example as above, but created using a Function component instead.</p>\n<p>A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can be written using much less code, are easier to understand, and will be preferred in this tutorial.</p>\n<pre>function Car() {<br>  return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;<br>}</pre>\n<h3>Props</h3>\n<p>Components can be passed as props, which stands for properties.</p>\n<p>Props are like function arguments, and you send them into the component as attributes.</p>\n<p>To send props into a component, use the same syntax as HTML attributes:</p>\n<p>Add a \u201cbrand\u201d attribute to the Car\u00a0element:</p>\n<pre>const myElement = &lt;Car brand=\"Ford\" /&gt;;</pre>\n<p>Use the brand attribute in the component:</p>\n<pre>function Car(props) {<br>  return &lt;h2&gt;I am a { props.brand }!&lt;/h2&gt;;<br>}</pre>\n<h3>State and\u00a0Hooks</h3>\n<p>State of a component is an object that holds some information that may change over the lifetime of the component.</p>\n<p>Hooks were added to React in version\u00a016.8.</p>\n<p>Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer\u00a0needed.</p>\n<p>For example, <strong>useState </strong>is a Hook that lets you add React state to function components</p>\n<pre>import { useState } from \"react\";<br><br>function FavoriteColor() {<br>  const [color, setColor] = useState(\"red\");<br>}</pre>\n<p>The first value color is our current\u00a0state.</p>\n<p>The second value setColor is the function that is used to update our\u00a0state.</p>\n<h3>React Events</h3>\n<p>Just like HTML DOM events, React can perform actions based on user\u00a0events.</p>\n<p>React has the same events as HTML: click, change, mouseover etc.</p>\n<p>React events are written in camelCase syntax:</p>\n<p>onClick instead of\u00a0onclick.</p>\n<p>React event handlers are written inside curly\u00a0braces:</p>\n<p>onClick={shoot} instead of onClick=\"shoot()\".</p>\n<pre>&lt;button onClick={shoot}&gt;Take the Shot!&lt;/button&gt;</pre>\n<p><strong>Example:</strong></p>\n<pre>function Football() {<br>  const shoot = () =&gt; {<br>    alert(\"Great Shot!\");<br>  }<br><br>  return (<br>    &lt;button onClick={shoot}&gt;Take the shot!&lt;/button&gt;<br>  );<br>}</pre>\n<p>Now that you are familiar with core React concepts. <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af\">Lets start\u00a0coding</a>.</p>\n<p>Part 3: <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af\">https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d5158c472fcb\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-1-2e8927a1e0c8\">previous article</a> you learned to develop the backend part of a simple student management web application using Django REST framework. In this article you will learn to develop the Frontend part of this app using React\u00a0JS.</p>\n<p>Before we start coding, let just go through some basic concepts of React Js. If you are already familiar with these concepts then you can directly jump to <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af\">part\u00a03</a>.</p>\n<a href=\"https://medium.com/media/e26c2b0d82977fd828b6178a62c5a917/href\">https://medium.com/media/e26c2b0d82977fd828b6178a62c5a917/href</a><h3><strong>Intro to React\u00a0Js</strong></h3>\n<p>React is a free and open-source front-end JavaScript library for building user interfaces based on UI components. It is maintained by Meta and a community of individual developers and companies.</p>\n<p>React uses <strong>JSX</strong> syntax. JSX is a React extension to the JavaScript language syntax which provides a way to structure component rendering using syntax familiar to many developers. It is similar in appearance to\u00a0HTML.</p>\n<h3><strong>What is\u00a0DOM?</strong></h3>\n<p>When a web page is loaded, the browser creates a <strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel of the\u00a0page.</p>\n<p>The <strong>HTML DOM</strong> model is constructed as a tree of\u00a0<strong>Objects</strong>:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/897/1*kcjcsg0KcJA_R5aFq3s2RQ.png\"></figure><p><strong><em>The W3C Document Object Model (DOM) is an API that allows programs and scripts to dynamically access and update the content, structure, and style of a document.</em></strong></p>\n<h3><strong>What is ReactDOM?</strong></h3>\n<p>ReactDOM is a package that provides DOM specific methods that can be used at the top level of a web app to enable an efficient way of managing DOM elements of the web page. ReactDOM provides the developers with an API containing the following methods and a few\u00a0more.</p>\n<ul>\n<li>render()</li>\n<li>findDOMNode()</li>\n<li>unmountComponentAtNode()</li>\n<li>hydrate()</li>\n<li>createPortal()</li>\n</ul>\n<p>To use the ReactDOM in any React web app we must first import ReactDOM from the react-dom package by using the following code\u00a0snippet:</p>\n<pre>import ReactDOM from 'react-dom'</pre>\n<h3>React Components</h3>\n<p>Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return\u00a0HTML.</p>\n<p>Components come in two types, Class components and Function components. We will develop our app using Function components.</p>\n<p><em>In older React code bases, you may find Class components primarily used. It is now suggested to use Function components along with Hooks, which were added in React\u00a016.8.</em></p>\n<h4>Class Component</h4>\n<p>A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.</p>\n<p>The component also requires a render() method, this method returns\u00a0HTML.</p>\n<pre>class Car extends React.Component {<br>  render() {<br>    return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;<br>  }<br>}</pre>\n<h4>Function Component</h4>\n<p>Here is the same example as above, but created using a Function component instead.</p>\n<p>A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can be written using much less code, are easier to understand, and will be preferred in this tutorial.</p>\n<pre>function Car() {<br>  return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;<br>}</pre>\n<h3>Props</h3>\n<p>Components can be passed as props, which stands for properties.</p>\n<p>Props are like function arguments, and you send them into the component as attributes.</p>\n<p>To send props into a component, use the same syntax as HTML attributes:</p>\n<p>Add a \u201cbrand\u201d attribute to the Car\u00a0element:</p>\n<pre>const myElement = &lt;Car brand=\"Ford\" /&gt;;</pre>\n<p>Use the brand attribute in the component:</p>\n<pre>function Car(props) {<br>  return &lt;h2&gt;I am a { props.brand }!&lt;/h2&gt;;<br>}</pre>\n<h3>State and\u00a0Hooks</h3>\n<p>State of a component is an object that holds some information that may change over the lifetime of the component.</p>\n<p>Hooks were added to React in version\u00a016.8.</p>\n<p>Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer\u00a0needed.</p>\n<p>For example, <strong>useState </strong>is a Hook that lets you add React state to function components</p>\n<pre>import { useState } from \"react\";<br><br>function FavoriteColor() {<br>  const [color, setColor] = useState(\"red\");<br>}</pre>\n<p>The first value color is our current\u00a0state.</p>\n<p>The second value setColor is the function that is used to update our\u00a0state.</p>\n<h3>React Events</h3>\n<p>Just like HTML DOM events, React can perform actions based on user\u00a0events.</p>\n<p>React has the same events as HTML: click, change, mouseover etc.</p>\n<p>React events are written in camelCase syntax:</p>\n<p>onClick instead of\u00a0onclick.</p>\n<p>React event handlers are written inside curly\u00a0braces:</p>\n<p>onClick={shoot} instead of onClick=\"shoot()\".</p>\n<pre>&lt;button onClick={shoot}&gt;Take the Shot!&lt;/button&gt;</pre>\n<p><strong>Example:</strong></p>\n<pre>function Football() {<br>  const shoot = () =&gt; {<br>    alert(\"Great Shot!\");<br>  }<br><br>  return (<br>    &lt;button onClick={shoot}&gt;Take the shot!&lt;/button&gt;<br>  );<br>}</pre>\n<p>Now that you are familiar with core React concepts. <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af\">Lets start\u00a0coding</a>.</p>\n<p>Part 3: <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af\">https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-3-f3d0d28139af</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d5158c472fcb\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["reactjs","django-rest-framework","rest-api","full-stack","django"]},{"title":"Develop a CRUD Application using Django and React (Part 1)","pubDate":"2022-10-16 14:20:48","link":"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-1-2e8927a1e0c8?source=rss-fc853dc52440------2","guid":"https://medium.com/p/2e8927a1e0c8","author":"Fizaashraf","thumbnail":"","description":"\n<p>In this Article you will learn to develop a simple student management web application with CRUD operations using <strong>Django Rest Framework</strong> for backend and <strong>React Js</strong> for frontend.</p>\n<p>The final application will look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yl4_7966YvNbdDty4zB8dg.png\"></figure><p>Get the full source code from\u00a0here:</p>\n<p><a href=\"https://github.com/fizaashraf37/smwa-project\">GitHub - fizaashraf37/smwa-project: A simple student management web application with CRUD operations developed in Django and React Js</a></p>\n<p>If you are a visual learner the you can watch full video with step by step instructions on\u00a0YouTube:</p>\n<a href=\"https://medium.com/media/ac32b358a144caee7f042ee285496799/href\">https://medium.com/media/ac32b358a144caee7f042ee285496799/href</a><h3><strong>Table of Contents:</strong></h3>\n<p>\u00b7 Introduction to REST\u00a0API</p>\n<p>\u00b7 Introduction to CRUD and HTTP\u00a0Verbs</p>\n<p>\u00b7 Application Architecture</p>\n<p>\u00b7 Steps to Develop the Application</p>\n<h3><strong>Introduction to REST\u00a0API</strong></h3>\n<p>If you have ever wondered how some big web applications like Netflix, Facebook etc work. The main concept behind almost any web application is REST APIs. These applications use REST APIs to interact with the backend data\u00a0store.</p>\n<p>An API (Application Programming Interface) is a set of rules which allows two or more computer programs to communicate with each\u00a0other.</p>\n<p>REST stands for Representational State Transfer which is a software architecture that defines the set of rules and industry standards that developers follow to create\u00a0APIs.</p>\n<p>A RESTful system consists of\u00a0a</p>\n<p>\u00b7 Client who requests for the resources (Client can be the web browser communing to the backend using frontend)</p>\n<p>\u00b7 Server who has the resources (Server can contain a database for storing the resources and backend using REST APIs to interact with the database)</p>\n<h3><strong>Introduction to CRUD and HTTP\u00a0Verbs</strong></h3>\n<p>CRUD stands for Create, Read, Update and Delete. These are the basic operations that are performed on any web application to create a new resource, get existing resource from database, update an existing resource or delete an existing resource. CRUD are the basic rules to make an API to be considered as REST\u00a0API.</p>\n<p>REST APIs use HTTP (Hypertext transfer protocol) to communicate with programs over the web. The basic HTTP verbs are <strong>POST, GET, PUT, PATCH and DELETE </strong>which correspond to create, read, update and delete respectively.</p>\n<p><strong>Application Architecture</strong></p>\n<p>Let\u2019s look at the architecture of this simple Django web application.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/659/1*QFp_3sJYpHL-M-fwyYGmRw.png\"></figure><h3><strong>Steps to Develop the Application</strong></h3>\n<p>Now you understand the basic concepts of REST APIs. Lets start developing the application. First we will develop the backend of the application.</p>\n<h4><strong>Backend Development</strong></h4>\n<p>To develop the backend we will need to install Pycharm and Django libraries. If you do not want to use Pycharm then you can use any IDE of your\u00a0choice.</p>\n<p><strong>Requirements:</strong><br>Python==3.9.13<br>Django==4.1.1<br>djangorestframework==3.14.0<br>django-cors-headers==3.13.0</p>\n<ol>\n<li>Download and Install PyCharm community edition from JetBrains website. <br><a href=\"https://www.jetbrains.com/pycharm/download/#section=windows\">https://www.jetbrains.com/pycharm/download/#section=windows</a>\n</li>\n<li>Open Pycharm and create a new project with a new virtual environment.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/792/1*hEgatGQXJimyCCOOpjPhJg.png\"></figure><p>3. Open terminal and install required libraries inside virtual environment.</p>\n<pre>pip install Django==4.1.1<br>pip install djangorestframework==3.14.0<br>pip install django-cors-headers==3.13.0</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/855/1*oi-j9TvPwZAHmWZAxk900Q.png\"></figure><p>4. Create a new Django project. This will generate some auto generated code e.g. django project structure, settings\u00a0etc.</p>\n<pre>django-admin startproject backend</pre>\n<p>The project structure should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/369/1*htjEvvh6wuJRsN3RV9oH1Q.png\"></figure><p>These files\u00a0are:</p>\n<ul>\n<li>The outer <strong>backend/</strong> root directory is a container for your project. Its name doesn\u2019t matter to Django; you can rename it to anything you\u00a0like.</li>\n<li>\n<strong>manage.py</strong>: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about <strong>manage.py</strong> in <a href=\"https://docs.djangoproject.com/en/4.1/ref/django-admin/\">django-admin and manage.py</a>.</li>\n<li>The inner <strong>backend/</strong> directory is the actual Python package for your project. Its name is the Python package name you\u2019ll need to use to import anything inside it (e.g. <strong>backend.urls</strong>).</li>\n<li>\n<strong>backend/__init__.py</strong>: An empty file that tells Python that this directory should be considered a Python package. If you\u2019re a Python beginner, read <a href=\"https://docs.python.org/3/tutorial/modules.html#tut-packages\">more about packages</a> in the official Python\u00a0docs.</li>\n<li>\n<strong>backend/settings.py</strong>: Settings/configuration for this Django project. <a href=\"https://docs.djangoproject.com/en/4.1/topics/settings/\">Django settings</a> will tell you all about how settings\u00a0work.</li>\n<li>\n<strong>backend/urls.py</strong>: The URL declarations for this Django project; a \u201ctable of contents\u201d of your Django-powered site. You can read more about URLs in <a href=\"https://docs.djangoproject.com/en/4.1/topics/http/urls/\">URL dispatcher</a>.</li>\n<li>\n<strong>backend/asgi.py</strong>: An entry-point for ASGI-compatible web servers to serve your project. See <a href=\"https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/\">How to deploy with ASGI</a> for more\u00a0details.</li>\n<li>\n<strong>backend/wsgi.py</strong>: An entry-point for WSGI-compatible web servers to serve your project. See <a href=\"https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/\">How to deploy with WSGI</a> for more\u00a0details.</li>\n</ul>\n<h4><strong>Start Django\u00a0Server</strong></h4>\n<p>Now that our Django project is created. We can start the development server to test if project is initialized successfully.</p>\n<p>Run the below commands to start Django development server</p>\n<pre>cd backend<br>python manage.py runserver</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/643/1*eTyJwIVK-o9jbD39NUOg5A.png\"></figure><p>You can access the development server from your browser <a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NfyOIKUzfOsgt65TC-qRfw.png\"></figure><h4><strong>Create Students\u00a0App</strong></h4>\n<p>We can now create our first app. In Django each app is a separate python package. You can consider an app a microservice if you are familiar with microservice architecture. When you create an app, Django automatically created the directory structure for you so that you can focus on coding instead of creating directory structure.</p>\n<p>To create the students app run the below command in the same directory where your manage.py is:</p>\n<pre>python manage.py startapp students</pre>\n<p>Django will create the following files in students app directory:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/362/1*gLdlInyDgYRwRPVRHFBCvg.png\"></figure><ul>\n<li>The <strong>students/migrations/</strong> directory will contain the code for migrating Django models into Database e.g. Create table migrations.</li>\n<li>\n<strong>students/__init__.py</strong>: An empty file that tells Python that this directory should be considered a Python\u00a0package</li>\n<li>\n<strong>students/admin.py\u00a0: </strong>All students app application models will be registered in this file so that these can be managed from Django admin\u00a0panel.</li>\n<li>\n<strong>students/apps.py</strong>: This file contains the configuration for the students app e.g. app\u00a0name.</li>\n<li>\n<strong>students/models.py</strong>: All database models for this app will be created in this\u00a0file.</li>\n<li>\n<strong>students/tests.py</strong>: All unit tests for this app will be created in this\u00a0file.</li>\n<li>\n<strong>students/views.py</strong>: Views will contain the logic for handling the HTTP requests e.g. GET, POST, PUT, DELETE\u00a0etc.</li>\n</ul>\n<h4><strong>Create Student\u00a0Model</strong></h4>\n<p>First we need a model for storing student information. A model is converted to database table when we apply migrations. In your <strong>students/models.py </strong>file add the below code to create Student\u00a0model:</p>\n<pre>from django.db import models<br><br><br>class Student(models.Model):<br>    studentId = models.AutoField(primary_key=True)<br>    FirstName = models.CharField(max_length=100)<br>    LastName = models.CharField(max_length=100)<br>    RegistrationNo = models.CharField(max_length=100)<br>    Email = models.CharField(max_length=100)<br>    Course = models.CharField(max_length=100)</pre>\n<p>Next we need to apply migrations to create Student table in the database. Django comes with a default SQLite database. We will use the default database for this tutorial. In real application you will be using commercial databases e.g. MySQL, Postgres\u00a0etc.</p>\n<p>Before running the migration we will need to add students app in settings.py file. Open settings.py file and add students.apps.StudentsConfig to INSTALLED_APPS setting:</p>\n<pre>INSTALLED_APPS = [<br>    \"django.contrib.admin\",<br>    \"django.contrib.auth\",<br>    \"django.contrib.contenttypes\",<br>    \"django.contrib.sessions\",<br>    \"django.contrib.messages\",<br>    \"django.contrib.staticfiles\",<br>    \"students.apps.StudentsConfig\",<br>]</pre>\n<p>Now run this command to generate migrations script for students app. This will generate the script <strong>0001_initial.py</strong> inside <strong>students/migrations </strong>folder for all the models you defined inside <strong>students/models.py. </strong>Don\u2019t make any changes to this\u00a0script.</p>\n<pre>python manage.py makemigrations students</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6tQpqdtfNbQ0mnOWJwBAKw.png\"></figure><p>Run below command to review the SQL generated for this migration:</p>\n<pre>python manage.py sqlmigrate students 0001</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/656/1*z0mWAq2IZsA5F7OT_ciA3w.png\"></figure><p>Now run migrate to create the student model in your database:</p>\n<pre>python manage.py migrate</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/595/1*HlOHpLC0sHXuc2KmyjDaxQ.png\"></figure><p>The migration has created the models from Django default apps and our student app which are included in INSTALLED_APPS inside settings.py. You can remove the default apps if you do not want these in your project and want to use your own apps for managing sessions, authentication etc.</p>\n<h4><strong>Create Admin\u00a0User</strong></h4>\n<p>We will need a user who can login to the admin site. Run this command to create admin\u00a0user:</p>\n<pre>python manage.py createsuperuser</pre>\n<p>Enter the username and password for the admin\u00a0user.</p>\n<p>Now start the development server and go to <a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a> to login with admin user that you\u00a0created:</p>\n<pre>python manage.py runserver</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3hcpsru1DJfxD4-0UEpGVA.png\"></figure><p>After successful login the Django admin page should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*k0DYxMXfg_y-dyxFeDtgNw.png\"></figure><p>If you are wondering why you can\u2019t see any models for your students app then no worries the migration ran successfully. We have not yet added student model in <strong>students/admin.py\u00a0. </strong>Open <strong>students/admin.py </strong>and add below code in this\u00a0file:</p>\n<pre>from django.contrib import admin<br>from .models import Student<br><br>models_list = [Student]<br>admin.site.register(models_list)</pre>\n<p>This will register the student model that we created inside models.py file to admin\u00a0site.</p>\n<p>Now refresh the admin page and you should be able to view the\u00a0changes:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*j6tuHWpfG1k357tcdmzf-g.png\"></figure><p>You can add, delete, update student objects from admin panel. Now you must be wondering that if user can add, delete, update objects from Django admin site then why we need to develop REST API and why we need to write frontend in REACT. Well, Django admin site cannot be used for actual application. You will never want your users to directly interact with your database and add, delete, update objects from there. Also you cannot handle any logic in admin\u00a0site.</p>\n<p>We will need to write views to handle user requests. The view will contain the logic to handle CRUD operations.</p>\n<h4><strong>Create Student Serializer</strong></h4>\n<p>Before creating our Student view, we need to create a serializer. Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON, XML or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming\u00a0data.</p>\n<p>Lets create our Student serializer. Create <strong>serializers.py</strong> file inside students directory. Open <strong>students/serializers.py </strong>and add below code in this\u00a0file:</p>\n<pre>from rest_framework import serializers<br>from .models import Student<br><br><br>class StudentSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = Student<br>        fields = ('studentId',<br>                  'FirstName',<br>                  'LastName',<br>                  'RegistrationNo',<br>                  'Email',<br>                  'Course')</pre>\n<h4><strong>Create Student\u00a0View</strong></h4>\n<p>We can now write HTTP methods for GET, POST, PUT and DELETE to perform CRUD operation on our student\u00a0model.</p>\n<p>Open <strong>students/views.py </strong>and add below code in this file to create a new student in Students\u00a0table.</p>\n<pre>from django.http.response import Http404<br>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from django.http.response import JsonResponse<br>from .models import Student<br>from .serializers import StudentSerializer<br><br><br>class StudentView(APIView):<br><br>    def post(self, request):<br>        data = request.data<br>        serializer = StudentSerializer(data=data)<br><br>        if serializer.is_valid():<br>            serializer.save()<br>            return JsonResponse(\"Student Added Successfully\",          safe=False)<br>        return JsonResponse(\"Failed to Add Student\", safe=False)</pre>\n<p>There are multiple ways of creating views in Django e.g. you can use decorators. I prefer to use Django REST framework APIView for writing views. Django REST Framework provides simplicity and flexibility to write REST APIs as it contains Generic classes for CRUD operations.</p>\n<p>In the first line of post function we get the payload which is usually in json format. Then we load this data into Student Serializer. Serializer provides a function to validate the data provided by user. If the data does not contain any invalid field then we can save the object in the table. Serializer.save will convert the data into model object and save this object into database\u00a0table.</p>\n<p>To call the view, we need to map it to a URL\u200a\u2014\u200aand for this we need a\u00a0URLconf.</p>\n<p>To create a URLconf in the students directory, create a file called <strong>urls.py</strong>. Your directory structure should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/356/1*5GIi7fI_TpV5x08z3Me8yg.png\"></figure><p>Open <strong>urls.py </strong>and<strong> </strong>below code in this\u00a0file:</p>\n<pre>from django.urls import path<br>from .views import StudentView<br><br>urlpatterns = [<br>    path('students/', StudentView.as_view())<br>]</pre>\n<p>This url is now available for our students app. But we can still not access it from browser. To make it accessible to Django we will need to include <strong>students/urls.py</strong> into root URLconf. Open <strong>backend/urls.py </strong>and include<strong> </strong><strong>students.urls</strong> in <strong>urlpatterns</strong> list:</p>\n<pre>from django.contrib import admin<br>from django.urls import path, include<br><br>urlpatterns = [<br>    path(\"admin/\", admin.site.urls),<br>    path('', include('students.urls')),<br>]</pre>\n<p>Now you should be able to access this path from your web browser. Go to <a href=\"http://localhost:8000/polls/\">http://localhost:8000/students/</a></p>\n<p>You should see error like\u00a0below:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1qg5J24unwaFF7olX8-FCg.png\"></figure><p>This is because we have not added django-rest-framework app in our INSTALLED_APPS. Open <strong>backend/settings.py </strong>and include corsheaders and rest_framework apps in INSTALLED_APPS:</p>\n<pre>INSTALLED_APPS = [<br>    \"django.contrib.admin\",<br>    \"django.contrib.auth\",<br>    \"django.contrib.contenttypes\",<br>    \"django.contrib.sessions\",<br>    \"django.contrib.messages\",<br>    \"django.contrib.staticfiles\",<br>    \"students.apps.StudentsConfig\",<br>    'corsheaders',<br>    'rest_framework',<br>]</pre>\n<p>Now refresh students URL page and you should be able to see page like\u00a0below:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1i8TR_SIuhUim6muo8i-Ig.png\"></figure><h4><strong>Test POST Student\u00a0API:</strong></h4>\n<p>We can now send the post request to the url <a href=\"http://localhost:8000/polls/\">http://localhost:8000/students/</a>. This will create a new student in the database table. You can use the Django client to test this but I prefer to use\u00a0postman:</p>\n<p>Add the below payload to the post\u00a0request:</p>\n<pre>{</pre>\n<pre>\"FirstName\": \"Alice\",</pre>\n<pre>\"LastName\": \"Bob\",</pre>\n<pre>\"RegistrationNo\": \"2012-BSCS-01\",</pre>\n<pre>\"Email\": \"alice.bob@student.com\",</pre>\n<pre>\"Course\": \"Data Structures\"</pre>\n<pre>}</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2PRhUxZvcay5WzNVimR-Ig.png\"><figcaption>Sending POST request using Django REST\u00a0Client</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tJSnizOJCsAA0_XNxTPiVg.png\"><figcaption>Sending Post Request using\u00a0Postman</figcaption></figure><p>If the request is successful then you should get 200 OK response from the\u00a0API.</p>\n<p>Congratulations, You have created your first Django app with POST request. Next we will implement the other three methods i.e. GET, PUT and DELETE to read, update and delete students.</p>\n<p><strong>GET, PUT and DELETE\u00a0Methods</strong></p>\n<p>In your <strong>backend/settings.py</strong> file add the remaining methods:</p>\n<p>GET</p>\n<pre>def get_student(self, pk):<br>    try:<br>        student = Student.objects.get(studentId=pk)<br>        return student<br>    except Student.DoesNotExist:<br>        raise Http404<br><br>def get(self, request, pk=None):<br>    if pk:<br>        data = self.get_student(pk)<br>        serializer = StudentSerializer(data)<br>    else:<br>        data = Student.objects.all()<br>        serializer = StudentSerializer(data, many=True)<br>    return Response(serializer.data)</pre>\n<p>In get methos we check if user has provided any student_id, if the student id is provided then only one student with that id is retreived from the database. Otherwise all students will be retrieved and returned as JSON. In this case StudentSerilizer is serializing the Django model object into\u00a0JSON.</p>\n<p>Now if you hit the students URL you should be able to see all students returned in\u00a0JSON:</p>\n<p><a href=\"http://127.0.0.1:8000/students/\">http://127.0.0.1:8000/students/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CdbLkd8gmwsgH4E182ABng.png\"></figure><p>If you want to retrieve only one student e.g. having studentId = 2. Go to URL <a href=\"http://127.0.0.1:8000/students/2\">http://127.0.0.1:8000/students/2</a>. You will receive page not found\u00a0error:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mA5wOQyeoTdgyEvq3A5zOQ.png\"></figure><p>This is because we have not added this URL in URLConf. Open <strong>students/urls.py</strong> and add the URL in urlpatterns list</p>\n<pre>path('students/&lt;int:pk&gt;/', StudentView.as_view())</pre>\n<p>The <strong>students/urls.py</strong> should look like\u00a0this:</p>\n<pre>from django.urls import path<br>from .views import StudentView<br><br>urlpatterns = [<br>    path('students/', StudentView.as_view()),<br>    path('students/&lt;int:pk&gt;/', StudentView.as_view())<br>]</pre>\n<p>Now hit the URL again and you should be able to get the student with id\u00a02:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fMHEPOX9aMvhxsCg2plaeA.png\"></figure><p>PUT:</p>\n<p>In students/views.py add put method to update the\u00a0student:</p>\n<pre>def put(self, request, pk=None):<br>    student_to_update = Student.objects.get(studentId=pk)<br>    serializer = StudentSerializer(instance=student_to_update, data=request.data, partial=True)<br><br>    if serializer.is_valid():<br>        serializer.save()<br>        return JsonResponse(\"Student updated Successfully\", safe=False)<br>    return JsonResponse(\"Failed To Update Student\")</pre>\n<p>In StudentSerializer we are passing partial=True to allow the user to pass some or all fields in payload. Since user might not be updating all\u00a0fields.</p>\n<p>You can test this using\u00a0Postman:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/950/1*JTqyzW03YsFA5IKvs1m_1g.png\"><figcaption>Sending PUT Request using\u00a0Postman</figcaption></figure><p>DELETE:</p>\n<p>In students/views.py add delete method to delete a\u00a0student:</p>\n<pre>def delete(self, request, pk):<br>    student_to_delete = Student.objects.get(studentId=pk)<br>    student_to_delete.delete()<br>    return JsonResponse(\"Student Deleted Successfully\", safe=False)</pre>\n<p>Test this using\u00a0Postman:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/961/1*v3TgEHZnoHGzuDHUSTQvjw.png\"><figcaption>Sending DELETE request using\u00a0Postman</figcaption></figure><p>Final views.py file should look like\u00a0this:</p>\n<pre>from django.http.response import Http404<br>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from django.http.response import JsonResponse<br>from .models import Student<br>from .serializers import StudentSerializer<br><br><br>class StudentView(APIView):<br><br>    def get_student(self, pk):<br>        try:<br>            student = Student.objects.get(studentId=pk)<br>            return student<br>        except Student.DoesNotExist:<br>            raise Http404<br><br>    def get(self, request, pk=None):<br>        if pk:<br>            data = self.get_student(pk)<br>            serializer = StudentSerializer(data)<br>        else:<br>            data = Student.objects.all()<br>            serializer = StudentSerializer(data, many=True)<br>        return Response(serializer.data)<br><br>    def post(self, request):<br>        data = request.data<br>        serializer = StudentSerializer(data=data)<br><br>        if serializer.is_valid():<br>            serializer.save()<br>            return JsonResponse(\"Student Added Successfully\", safe=False)<br>        return JsonResponse(\"Failed to Add Student\", safe=False)<br><br>    def put(self, request, pk=None):<br>        student_to_update = Student.objects.get(studentId=pk)<br>        serializer = StudentSerializer(instance=student_to_update, data=request.data, partial=True)<br><br>        if serializer.is_valid():<br>            serializer.save()<br>            return JsonResponse(\"Student updated Successfully\", safe=False)<br>        return JsonResponse(\"Failed To Update Student\")<br><br>    def delete(self, request, pk):<br>        student_to_delete = Student.objects.get(studentId=pk)<br>        student_to_delete.delete()<br>        return JsonResponse(\"Student Deleted Successfully\", safe=False)</pre>\n<p>Congratulations, you have completed the backend part of this tutorial. In <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb\">next part</a> you will learn to develop the frontend in React\u00a0Js.</p>\n<p>Part 2: <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb\">https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2e8927a1e0c8\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In this Article you will learn to develop a simple student management web application with CRUD operations using <strong>Django Rest Framework</strong> for backend and <strong>React Js</strong> for frontend.</p>\n<p>The final application will look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yl4_7966YvNbdDty4zB8dg.png\"></figure><p>Get the full source code from\u00a0here:</p>\n<p><a href=\"https://github.com/fizaashraf37/smwa-project\">GitHub - fizaashraf37/smwa-project: A simple student management web application with CRUD operations developed in Django and React Js</a></p>\n<p>If you are a visual learner the you can watch full video with step by step instructions on\u00a0YouTube:</p>\n<a href=\"https://medium.com/media/ac32b358a144caee7f042ee285496799/href\">https://medium.com/media/ac32b358a144caee7f042ee285496799/href</a><h3><strong>Table of Contents:</strong></h3>\n<p>\u00b7 Introduction to REST\u00a0API</p>\n<p>\u00b7 Introduction to CRUD and HTTP\u00a0Verbs</p>\n<p>\u00b7 Application Architecture</p>\n<p>\u00b7 Steps to Develop the Application</p>\n<h3><strong>Introduction to REST\u00a0API</strong></h3>\n<p>If you have ever wondered how some big web applications like Netflix, Facebook etc work. The main concept behind almost any web application is REST APIs. These applications use REST APIs to interact with the backend data\u00a0store.</p>\n<p>An API (Application Programming Interface) is a set of rules which allows two or more computer programs to communicate with each\u00a0other.</p>\n<p>REST stands for Representational State Transfer which is a software architecture that defines the set of rules and industry standards that developers follow to create\u00a0APIs.</p>\n<p>A RESTful system consists of\u00a0a</p>\n<p>\u00b7 Client who requests for the resources (Client can be the web browser communing to the backend using frontend)</p>\n<p>\u00b7 Server who has the resources (Server can contain a database for storing the resources and backend using REST APIs to interact with the database)</p>\n<h3><strong>Introduction to CRUD and HTTP\u00a0Verbs</strong></h3>\n<p>CRUD stands for Create, Read, Update and Delete. These are the basic operations that are performed on any web application to create a new resource, get existing resource from database, update an existing resource or delete an existing resource. CRUD are the basic rules to make an API to be considered as REST\u00a0API.</p>\n<p>REST APIs use HTTP (Hypertext transfer protocol) to communicate with programs over the web. The basic HTTP verbs are <strong>POST, GET, PUT, PATCH and DELETE </strong>which correspond to create, read, update and delete respectively.</p>\n<p><strong>Application Architecture</strong></p>\n<p>Let\u2019s look at the architecture of this simple Django web application.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/659/1*QFp_3sJYpHL-M-fwyYGmRw.png\"></figure><h3><strong>Steps to Develop the Application</strong></h3>\n<p>Now you understand the basic concepts of REST APIs. Lets start developing the application. First we will develop the backend of the application.</p>\n<h4><strong>Backend Development</strong></h4>\n<p>To develop the backend we will need to install Pycharm and Django libraries. If you do not want to use Pycharm then you can use any IDE of your\u00a0choice.</p>\n<p><strong>Requirements:</strong><br>Python==3.9.13<br>Django==4.1.1<br>djangorestframework==3.14.0<br>django-cors-headers==3.13.0</p>\n<ol>\n<li>Download and Install PyCharm community edition from JetBrains website. <br><a href=\"https://www.jetbrains.com/pycharm/download/#section=windows\">https://www.jetbrains.com/pycharm/download/#section=windows</a>\n</li>\n<li>Open Pycharm and create a new project with a new virtual environment.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/792/1*hEgatGQXJimyCCOOpjPhJg.png\"></figure><p>3. Open terminal and install required libraries inside virtual environment.</p>\n<pre>pip install Django==4.1.1<br>pip install djangorestframework==3.14.0<br>pip install django-cors-headers==3.13.0</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/855/1*oi-j9TvPwZAHmWZAxk900Q.png\"></figure><p>4. Create a new Django project. This will generate some auto generated code e.g. django project structure, settings\u00a0etc.</p>\n<pre>django-admin startproject backend</pre>\n<p>The project structure should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/369/1*htjEvvh6wuJRsN3RV9oH1Q.png\"></figure><p>These files\u00a0are:</p>\n<ul>\n<li>The outer <strong>backend/</strong> root directory is a container for your project. Its name doesn\u2019t matter to Django; you can rename it to anything you\u00a0like.</li>\n<li>\n<strong>manage.py</strong>: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about <strong>manage.py</strong> in <a href=\"https://docs.djangoproject.com/en/4.1/ref/django-admin/\">django-admin and manage.py</a>.</li>\n<li>The inner <strong>backend/</strong> directory is the actual Python package for your project. Its name is the Python package name you\u2019ll need to use to import anything inside it (e.g. <strong>backend.urls</strong>).</li>\n<li>\n<strong>backend/__init__.py</strong>: An empty file that tells Python that this directory should be considered a Python package. If you\u2019re a Python beginner, read <a href=\"https://docs.python.org/3/tutorial/modules.html#tut-packages\">more about packages</a> in the official Python\u00a0docs.</li>\n<li>\n<strong>backend/settings.py</strong>: Settings/configuration for this Django project. <a href=\"https://docs.djangoproject.com/en/4.1/topics/settings/\">Django settings</a> will tell you all about how settings\u00a0work.</li>\n<li>\n<strong>backend/urls.py</strong>: The URL declarations for this Django project; a \u201ctable of contents\u201d of your Django-powered site. You can read more about URLs in <a href=\"https://docs.djangoproject.com/en/4.1/topics/http/urls/\">URL dispatcher</a>.</li>\n<li>\n<strong>backend/asgi.py</strong>: An entry-point for ASGI-compatible web servers to serve your project. See <a href=\"https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/\">How to deploy with ASGI</a> for more\u00a0details.</li>\n<li>\n<strong>backend/wsgi.py</strong>: An entry-point for WSGI-compatible web servers to serve your project. See <a href=\"https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/\">How to deploy with WSGI</a> for more\u00a0details.</li>\n</ul>\n<h4><strong>Start Django\u00a0Server</strong></h4>\n<p>Now that our Django project is created. We can start the development server to test if project is initialized successfully.</p>\n<p>Run the below commands to start Django development server</p>\n<pre>cd backend<br>python manage.py runserver</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/643/1*eTyJwIVK-o9jbD39NUOg5A.png\"></figure><p>You can access the development server from your browser <a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NfyOIKUzfOsgt65TC-qRfw.png\"></figure><h4><strong>Create Students\u00a0App</strong></h4>\n<p>We can now create our first app. In Django each app is a separate python package. You can consider an app a microservice if you are familiar with microservice architecture. When you create an app, Django automatically created the directory structure for you so that you can focus on coding instead of creating directory structure.</p>\n<p>To create the students app run the below command in the same directory where your manage.py is:</p>\n<pre>python manage.py startapp students</pre>\n<p>Django will create the following files in students app directory:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/362/1*gLdlInyDgYRwRPVRHFBCvg.png\"></figure><ul>\n<li>The <strong>students/migrations/</strong> directory will contain the code for migrating Django models into Database e.g. Create table migrations.</li>\n<li>\n<strong>students/__init__.py</strong>: An empty file that tells Python that this directory should be considered a Python\u00a0package</li>\n<li>\n<strong>students/admin.py\u00a0: </strong>All students app application models will be registered in this file so that these can be managed from Django admin\u00a0panel.</li>\n<li>\n<strong>students/apps.py</strong>: This file contains the configuration for the students app e.g. app\u00a0name.</li>\n<li>\n<strong>students/models.py</strong>: All database models for this app will be created in this\u00a0file.</li>\n<li>\n<strong>students/tests.py</strong>: All unit tests for this app will be created in this\u00a0file.</li>\n<li>\n<strong>students/views.py</strong>: Views will contain the logic for handling the HTTP requests e.g. GET, POST, PUT, DELETE\u00a0etc.</li>\n</ul>\n<h4><strong>Create Student\u00a0Model</strong></h4>\n<p>First we need a model for storing student information. A model is converted to database table when we apply migrations. In your <strong>students/models.py </strong>file add the below code to create Student\u00a0model:</p>\n<pre>from django.db import models<br><br><br>class Student(models.Model):<br>    studentId = models.AutoField(primary_key=True)<br>    FirstName = models.CharField(max_length=100)<br>    LastName = models.CharField(max_length=100)<br>    RegistrationNo = models.CharField(max_length=100)<br>    Email = models.CharField(max_length=100)<br>    Course = models.CharField(max_length=100)</pre>\n<p>Next we need to apply migrations to create Student table in the database. Django comes with a default SQLite database. We will use the default database for this tutorial. In real application you will be using commercial databases e.g. MySQL, Postgres\u00a0etc.</p>\n<p>Before running the migration we will need to add students app in settings.py file. Open settings.py file and add students.apps.StudentsConfig to INSTALLED_APPS setting:</p>\n<pre>INSTALLED_APPS = [<br>    \"django.contrib.admin\",<br>    \"django.contrib.auth\",<br>    \"django.contrib.contenttypes\",<br>    \"django.contrib.sessions\",<br>    \"django.contrib.messages\",<br>    \"django.contrib.staticfiles\",<br>    \"students.apps.StudentsConfig\",<br>]</pre>\n<p>Now run this command to generate migrations script for students app. This will generate the script <strong>0001_initial.py</strong> inside <strong>students/migrations </strong>folder for all the models you defined inside <strong>students/models.py. </strong>Don\u2019t make any changes to this\u00a0script.</p>\n<pre>python manage.py makemigrations students</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6tQpqdtfNbQ0mnOWJwBAKw.png\"></figure><p>Run below command to review the SQL generated for this migration:</p>\n<pre>python manage.py sqlmigrate students 0001</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/656/1*z0mWAq2IZsA5F7OT_ciA3w.png\"></figure><p>Now run migrate to create the student model in your database:</p>\n<pre>python manage.py migrate</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/595/1*HlOHpLC0sHXuc2KmyjDaxQ.png\"></figure><p>The migration has created the models from Django default apps and our student app which are included in INSTALLED_APPS inside settings.py. You can remove the default apps if you do not want these in your project and want to use your own apps for managing sessions, authentication etc.</p>\n<h4><strong>Create Admin\u00a0User</strong></h4>\n<p>We will need a user who can login to the admin site. Run this command to create admin\u00a0user:</p>\n<pre>python manage.py createsuperuser</pre>\n<p>Enter the username and password for the admin\u00a0user.</p>\n<p>Now start the development server and go to <a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a> to login with admin user that you\u00a0created:</p>\n<pre>python manage.py runserver</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3hcpsru1DJfxD4-0UEpGVA.png\"></figure><p>After successful login the Django admin page should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*k0DYxMXfg_y-dyxFeDtgNw.png\"></figure><p>If you are wondering why you can\u2019t see any models for your students app then no worries the migration ran successfully. We have not yet added student model in <strong>students/admin.py\u00a0. </strong>Open <strong>students/admin.py </strong>and add below code in this\u00a0file:</p>\n<pre>from django.contrib import admin<br>from .models import Student<br><br>models_list = [Student]<br>admin.site.register(models_list)</pre>\n<p>This will register the student model that we created inside models.py file to admin\u00a0site.</p>\n<p>Now refresh the admin page and you should be able to view the\u00a0changes:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*j6tuHWpfG1k357tcdmzf-g.png\"></figure><p>You can add, delete, update student objects from admin panel. Now you must be wondering that if user can add, delete, update objects from Django admin site then why we need to develop REST API and why we need to write frontend in REACT. Well, Django admin site cannot be used for actual application. You will never want your users to directly interact with your database and add, delete, update objects from there. Also you cannot handle any logic in admin\u00a0site.</p>\n<p>We will need to write views to handle user requests. The view will contain the logic to handle CRUD operations.</p>\n<h4><strong>Create Student Serializer</strong></h4>\n<p>Before creating our Student view, we need to create a serializer. Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON, XML or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming\u00a0data.</p>\n<p>Lets create our Student serializer. Create <strong>serializers.py</strong> file inside students directory. Open <strong>students/serializers.py </strong>and add below code in this\u00a0file:</p>\n<pre>from rest_framework import serializers<br>from .models import Student<br><br><br>class StudentSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = Student<br>        fields = ('studentId',<br>                  'FirstName',<br>                  'LastName',<br>                  'RegistrationNo',<br>                  'Email',<br>                  'Course')</pre>\n<h4><strong>Create Student\u00a0View</strong></h4>\n<p>We can now write HTTP methods for GET, POST, PUT and DELETE to perform CRUD operation on our student\u00a0model.</p>\n<p>Open <strong>students/views.py </strong>and add below code in this file to create a new student in Students\u00a0table.</p>\n<pre>from django.http.response import Http404<br>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from django.http.response import JsonResponse<br>from .models import Student<br>from .serializers import StudentSerializer<br><br><br>class StudentView(APIView):<br><br>    def post(self, request):<br>        data = request.data<br>        serializer = StudentSerializer(data=data)<br><br>        if serializer.is_valid():<br>            serializer.save()<br>            return JsonResponse(\"Student Added Successfully\",          safe=False)<br>        return JsonResponse(\"Failed to Add Student\", safe=False)</pre>\n<p>There are multiple ways of creating views in Django e.g. you can use decorators. I prefer to use Django REST framework APIView for writing views. Django REST Framework provides simplicity and flexibility to write REST APIs as it contains Generic classes for CRUD operations.</p>\n<p>In the first line of post function we get the payload which is usually in json format. Then we load this data into Student Serializer. Serializer provides a function to validate the data provided by user. If the data does not contain any invalid field then we can save the object in the table. Serializer.save will convert the data into model object and save this object into database\u00a0table.</p>\n<p>To call the view, we need to map it to a URL\u200a\u2014\u200aand for this we need a\u00a0URLconf.</p>\n<p>To create a URLconf in the students directory, create a file called <strong>urls.py</strong>. Your directory structure should look like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/356/1*5GIi7fI_TpV5x08z3Me8yg.png\"></figure><p>Open <strong>urls.py </strong>and<strong> </strong>below code in this\u00a0file:</p>\n<pre>from django.urls import path<br>from .views import StudentView<br><br>urlpatterns = [<br>    path('students/', StudentView.as_view())<br>]</pre>\n<p>This url is now available for our students app. But we can still not access it from browser. To make it accessible to Django we will need to include <strong>students/urls.py</strong> into root URLconf. Open <strong>backend/urls.py </strong>and include<strong> </strong><strong>students.urls</strong> in <strong>urlpatterns</strong> list:</p>\n<pre>from django.contrib import admin<br>from django.urls import path, include<br><br>urlpatterns = [<br>    path(\"admin/\", admin.site.urls),<br>    path('', include('students.urls')),<br>]</pre>\n<p>Now you should be able to access this path from your web browser. Go to <a href=\"http://localhost:8000/polls/\">http://localhost:8000/students/</a></p>\n<p>You should see error like\u00a0below:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1qg5J24unwaFF7olX8-FCg.png\"></figure><p>This is because we have not added django-rest-framework app in our INSTALLED_APPS. Open <strong>backend/settings.py </strong>and include corsheaders and rest_framework apps in INSTALLED_APPS:</p>\n<pre>INSTALLED_APPS = [<br>    \"django.contrib.admin\",<br>    \"django.contrib.auth\",<br>    \"django.contrib.contenttypes\",<br>    \"django.contrib.sessions\",<br>    \"django.contrib.messages\",<br>    \"django.contrib.staticfiles\",<br>    \"students.apps.StudentsConfig\",<br>    'corsheaders',<br>    'rest_framework',<br>]</pre>\n<p>Now refresh students URL page and you should be able to see page like\u00a0below:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1i8TR_SIuhUim6muo8i-Ig.png\"></figure><h4><strong>Test POST Student\u00a0API:</strong></h4>\n<p>We can now send the post request to the url <a href=\"http://localhost:8000/polls/\">http://localhost:8000/students/</a>. This will create a new student in the database table. You can use the Django client to test this but I prefer to use\u00a0postman:</p>\n<p>Add the below payload to the post\u00a0request:</p>\n<pre>{</pre>\n<pre>\"FirstName\": \"Alice\",</pre>\n<pre>\"LastName\": \"Bob\",</pre>\n<pre>\"RegistrationNo\": \"2012-BSCS-01\",</pre>\n<pre>\"Email\": \"alice.bob@student.com\",</pre>\n<pre>\"Course\": \"Data Structures\"</pre>\n<pre>}</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2PRhUxZvcay5WzNVimR-Ig.png\"><figcaption>Sending POST request using Django REST\u00a0Client</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tJSnizOJCsAA0_XNxTPiVg.png\"><figcaption>Sending Post Request using\u00a0Postman</figcaption></figure><p>If the request is successful then you should get 200 OK response from the\u00a0API.</p>\n<p>Congratulations, You have created your first Django app with POST request. Next we will implement the other three methods i.e. GET, PUT and DELETE to read, update and delete students.</p>\n<p><strong>GET, PUT and DELETE\u00a0Methods</strong></p>\n<p>In your <strong>backend/settings.py</strong> file add the remaining methods:</p>\n<p>GET</p>\n<pre>def get_student(self, pk):<br>    try:<br>        student = Student.objects.get(studentId=pk)<br>        return student<br>    except Student.DoesNotExist:<br>        raise Http404<br><br>def get(self, request, pk=None):<br>    if pk:<br>        data = self.get_student(pk)<br>        serializer = StudentSerializer(data)<br>    else:<br>        data = Student.objects.all()<br>        serializer = StudentSerializer(data, many=True)<br>    return Response(serializer.data)</pre>\n<p>In get methos we check if user has provided any student_id, if the student id is provided then only one student with that id is retreived from the database. Otherwise all students will be retrieved and returned as JSON. In this case StudentSerilizer is serializing the Django model object into\u00a0JSON.</p>\n<p>Now if you hit the students URL you should be able to see all students returned in\u00a0JSON:</p>\n<p><a href=\"http://127.0.0.1:8000/students/\">http://127.0.0.1:8000/students/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CdbLkd8gmwsgH4E182ABng.png\"></figure><p>If you want to retrieve only one student e.g. having studentId = 2. Go to URL <a href=\"http://127.0.0.1:8000/students/2\">http://127.0.0.1:8000/students/2</a>. You will receive page not found\u00a0error:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mA5wOQyeoTdgyEvq3A5zOQ.png\"></figure><p>This is because we have not added this URL in URLConf. Open <strong>students/urls.py</strong> and add the URL in urlpatterns list</p>\n<pre>path('students/&lt;int:pk&gt;/', StudentView.as_view())</pre>\n<p>The <strong>students/urls.py</strong> should look like\u00a0this:</p>\n<pre>from django.urls import path<br>from .views import StudentView<br><br>urlpatterns = [<br>    path('students/', StudentView.as_view()),<br>    path('students/&lt;int:pk&gt;/', StudentView.as_view())<br>]</pre>\n<p>Now hit the URL again and you should be able to get the student with id\u00a02:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fMHEPOX9aMvhxsCg2plaeA.png\"></figure><p>PUT:</p>\n<p>In students/views.py add put method to update the\u00a0student:</p>\n<pre>def put(self, request, pk=None):<br>    student_to_update = Student.objects.get(studentId=pk)<br>    serializer = StudentSerializer(instance=student_to_update, data=request.data, partial=True)<br><br>    if serializer.is_valid():<br>        serializer.save()<br>        return JsonResponse(\"Student updated Successfully\", safe=False)<br>    return JsonResponse(\"Failed To Update Student\")</pre>\n<p>In StudentSerializer we are passing partial=True to allow the user to pass some or all fields in payload. Since user might not be updating all\u00a0fields.</p>\n<p>You can test this using\u00a0Postman:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/950/1*JTqyzW03YsFA5IKvs1m_1g.png\"><figcaption>Sending PUT Request using\u00a0Postman</figcaption></figure><p>DELETE:</p>\n<p>In students/views.py add delete method to delete a\u00a0student:</p>\n<pre>def delete(self, request, pk):<br>    student_to_delete = Student.objects.get(studentId=pk)<br>    student_to_delete.delete()<br>    return JsonResponse(\"Student Deleted Successfully\", safe=False)</pre>\n<p>Test this using\u00a0Postman:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/961/1*v3TgEHZnoHGzuDHUSTQvjw.png\"><figcaption>Sending DELETE request using\u00a0Postman</figcaption></figure><p>Final views.py file should look like\u00a0this:</p>\n<pre>from django.http.response import Http404<br>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from django.http.response import JsonResponse<br>from .models import Student<br>from .serializers import StudentSerializer<br><br><br>class StudentView(APIView):<br><br>    def get_student(self, pk):<br>        try:<br>            student = Student.objects.get(studentId=pk)<br>            return student<br>        except Student.DoesNotExist:<br>            raise Http404<br><br>    def get(self, request, pk=None):<br>        if pk:<br>            data = self.get_student(pk)<br>            serializer = StudentSerializer(data)<br>        else:<br>            data = Student.objects.all()<br>            serializer = StudentSerializer(data, many=True)<br>        return Response(serializer.data)<br><br>    def post(self, request):<br>        data = request.data<br>        serializer = StudentSerializer(data=data)<br><br>        if serializer.is_valid():<br>            serializer.save()<br>            return JsonResponse(\"Student Added Successfully\", safe=False)<br>        return JsonResponse(\"Failed to Add Student\", safe=False)<br><br>    def put(self, request, pk=None):<br>        student_to_update = Student.objects.get(studentId=pk)<br>        serializer = StudentSerializer(instance=student_to_update, data=request.data, partial=True)<br><br>        if serializer.is_valid():<br>            serializer.save()<br>            return JsonResponse(\"Student updated Successfully\", safe=False)<br>        return JsonResponse(\"Failed To Update Student\")<br><br>    def delete(self, request, pk):<br>        student_to_delete = Student.objects.get(studentId=pk)<br>        student_to_delete.delete()<br>        return JsonResponse(\"Student Deleted Successfully\", safe=False)</pre>\n<p>Congratulations, you have completed the backend part of this tutorial. In <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb\">next part</a> you will learn to develop the frontend in React\u00a0Js.</p>\n<p>Part 2: <a href=\"https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb\">https://medium.com/@fizaashraf37/develop-a-crud-application-using-django-and-react-part-2-d5158c472fcb</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2e8927a1e0c8\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["reactjs","django","rest-api","full-stack","django-rest-framework"]},{"title":"Run Docker Linux Containers on Windows Server 2019 (LCOW)\u200a\u2014\u200aStep by Step Guide","pubDate":"2022-08-01 10:20:45","link":"https://medium.com/@fizaashraf37/run-docker-linux-containers-on-windows-server-2019-lcow-step-by-step-guide-452cf6bf3180?source=rss-fc853dc52440------2","guid":"https://medium.com/p/452cf6bf3180","author":"Fizaashraf","thumbnail":"","description":"\n<h3>Run Docker Linux Containers on Windows Server 2019 (LCOW)\u200a\u2014\u200aStep by Step\u00a0Guide</h3>\n<p>Hi Folks,</p>\n<p>Today I will show you how you can Install docker engine from DockerMSFTProvider and run both windows and Linux containers on\u00a0this.</p>\n<p><strong>Prerequisites:</strong></p>\n<ol>\n<li>Windows Server 2019 Installed on a VM or a host\u00a0machine</li>\n<li>Virtualization Enabled</li>\n</ol>\n<p><strong>Enable Virtualization</strong></p>\n<p>If your windows server is installed on a host machine then you can simply check if virtualization is enabled from task manager performance tab.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/608/0*34BXbqSD3Rwbaxmf.PNG\"></figure><p>If virtualization is enabled, then you are good to\u00a0go.</p>\n<p>If your windows server is installed on a VM e.g. on VMware then you will need to enable nested virtualization from your VM settings. See the last section of my blog <a href=\"https://medium.com/@fizaashraf37/install-windows-server-2019-on-a-virtual-machine-step-by-step-guide-170dd1ab01ac\">Install Windows Server 2019 on a Virtual Machine</a> to enable nested virtualization on\u00a0VMware.</p>\n<p><strong>Steps:</strong></p>\n<ol>\n<li>Enable Hyper-V and Containers Feature</li>\n<li>Install Docker\u00a0EE</li>\n<li>Enable LCOW (Linux Containers on\u00a0Windows)</li>\n<li>Run a Linux Container</li>\n<li>Install Docker-Compose (Optional)</li>\n</ol>\n<p><strong>1. Enable Hyper-V and Containers Feature</strong></p>\n<p>To enable windows Hyper-V and Containers feature, open PowerShell in administrator mode on your windows server 2019 and run this\u00a0command:</p>\n<pre><em>Install-WindowsFeature -Name Hyper-V,Containers -IncludeAllSubFeature -IncludeManagementTools</em></pre>\n<p>You will need to restart your computer after installing these\u00a0features</p>\n<p><strong>1. Install Docker\u00a0EE</strong></p>\n<p>To install docker EE you will need to install the package provider and docker\u00a0package</p>\n<p>To install Package Provider run below command in PowerShell (Administrator Mode):</p>\n<pre><em>Install-Module DockerMSFTProvider</em></pre>\n<p>Now import the module and package\u00a0provider</p>\n<pre><em>Import-Module-Name DockerMSFTProvider -Force<br>Import-Packageprovider -Name DockerMSFTProvider -Force</em></pre>\n<p>To check the latest version of docker on Package Provider, run this\u00a0command:</p>\n<pre><em>Find-Package docker</em></pre>\n<p>Now you just need to install\u00a0docker</p>\n<pre><em>Install-Package -Name Docker -Source DockerDefault</em></pre>\n<p>After installation, restart your computer and then type docker version in powershell to check the installed version of docker, if this works fine then installation is successful.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/599/0*WRPyXNHbgnG3iRBy.PNG\"></figure><p>Now you can run any windows container on this. To run linux containers you will need to enable LCOW on your windows. See next steps to enable\u00a0LCOW.</p>\n<p><strong>3. Enable LCOW (Linux Containers on\u00a0Windows)</strong></p>\n<p>To run linux containers on windows we will need to make some changes in docker default configurations.</p>\n<p>First we will set an environment variable to enable linux conatiners support.</p>\n<pre><em>[Environment]::SetEnvironmentVariable(\"LCOW_SUPPORTED\", \"1\", \"Machine\")</em></pre>\n<p>Next we will create a docker daemon configuration file</p>\n<pre><em>$configfile = @\"<br>{<br>    \"experimental\": true<br>}<br>\"@</em></pre>\n<pre><em>$configfile | Out-File -FilePath C:\\ProgramData\\docker\\config\\daemon.json -Encoding ascii -Force</em></pre>\n<p>Finally we need to install linux kernel to run linux conatiners. Replace <strong>v4.14.35-v0.3.9 </strong>with latest\u00a0version</p>\n<pre><em>Invoke-WebRequest -Uri \"https://github.com/linuxkit/lcow/releases/download/v4.14.35-v0.3.9/release.zip\" -UseBasicParsing -OutFile release.zip</em></pre>\n<pre><em>Expand-Archive release.zip -DestinationPath \"$Env:ProgramFiles\\Linux Containers\\.\"</em></pre>\n<p>Now restart your machine to apply\u00a0changes</p>\n<p><strong>4. Run a Linux Conatiner</strong></p>\n<p>Now to test if everything is working fine, we will run a linux test container. To run linux containers we need to specify the\u00a0platform</p>\n<pre><em>docker run --rm -it --platform=linux ubuntu bash</em></pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/647/0*HnRokkkDlaxh6IEv.PNG\"></figure><p><strong>5. Install Docker-Compose (Optional)</strong></p>\n<p>If you are used to using docker-compose then you can install this as this is available for windows server as well. Replace <strong>\u201cv2.8.0\u201d</strong> to latest\u00a0version.</p>\n<p>You can get the latest release from this\u00a0link:</p>\n<p><a href=\"https://github.com/docker/compose/releases\">https://github.com/docker/compose/releases</a></p>\n<pre><em>$dockerComposeVersion</em> = \"v2.8.0\"<br><em>Invoke-WebRequest</em> \"https://github.com/docker/compose/releases/download/$dockerComposeVersion/docker-compose-Windows-x86_64.exe\" -UseBasicParsing -OutFile <em>$Env:ProgramFiles</em>\\docker\\docker-compose.exe</pre>\n<h3>Comments</h3>\n<p><a href=\"https://www.blogger.com/\">Powered by\u00a0Blogger</a></p>\n<p>Theme images by <a href=\"http://www.offset.com/photos/394244\">Michael\u00a0Elkan</a></p>\n<p><a href=\"https://www.blogger.com/profile/04282860802688302019\"><strong>FIZA</strong></a><a href=\"https://www.blogger.com/profile/04282860802688302019\">VISIT PROFILE</a></p>\n<h3><a href=\"https://www.blogger.com/go/report-abuse\">Report Abuse</a></h3>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=452cf6bf3180\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Run Docker Linux Containers on Windows Server 2019 (LCOW)\u200a\u2014\u200aStep by Step\u00a0Guide</h3>\n<p>Hi Folks,</p>\n<p>Today I will show you how you can Install docker engine from DockerMSFTProvider and run both windows and Linux containers on\u00a0this.</p>\n<p><strong>Prerequisites:</strong></p>\n<ol>\n<li>Windows Server 2019 Installed on a VM or a host\u00a0machine</li>\n<li>Virtualization Enabled</li>\n</ol>\n<p><strong>Enable Virtualization</strong></p>\n<p>If your windows server is installed on a host machine then you can simply check if virtualization is enabled from task manager performance tab.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/608/0*34BXbqSD3Rwbaxmf.PNG\"></figure><p>If virtualization is enabled, then you are good to\u00a0go.</p>\n<p>If your windows server is installed on a VM e.g. on VMware then you will need to enable nested virtualization from your VM settings. See the last section of my blog <a href=\"https://medium.com/@fizaashraf37/install-windows-server-2019-on-a-virtual-machine-step-by-step-guide-170dd1ab01ac\">Install Windows Server 2019 on a Virtual Machine</a> to enable nested virtualization on\u00a0VMware.</p>\n<p><strong>Steps:</strong></p>\n<ol>\n<li>Enable Hyper-V and Containers Feature</li>\n<li>Install Docker\u00a0EE</li>\n<li>Enable LCOW (Linux Containers on\u00a0Windows)</li>\n<li>Run a Linux Container</li>\n<li>Install Docker-Compose (Optional)</li>\n</ol>\n<p><strong>1. Enable Hyper-V and Containers Feature</strong></p>\n<p>To enable windows Hyper-V and Containers feature, open PowerShell in administrator mode on your windows server 2019 and run this\u00a0command:</p>\n<pre><em>Install-WindowsFeature -Name Hyper-V,Containers -IncludeAllSubFeature -IncludeManagementTools</em></pre>\n<p>You will need to restart your computer after installing these\u00a0features</p>\n<p><strong>1. Install Docker\u00a0EE</strong></p>\n<p>To install docker EE you will need to install the package provider and docker\u00a0package</p>\n<p>To install Package Provider run below command in PowerShell (Administrator Mode):</p>\n<pre><em>Install-Module DockerMSFTProvider</em></pre>\n<p>Now import the module and package\u00a0provider</p>\n<pre><em>Import-Module-Name DockerMSFTProvider -Force<br>Import-Packageprovider -Name DockerMSFTProvider -Force</em></pre>\n<p>To check the latest version of docker on Package Provider, run this\u00a0command:</p>\n<pre><em>Find-Package docker</em></pre>\n<p>Now you just need to install\u00a0docker</p>\n<pre><em>Install-Package -Name Docker -Source DockerDefault</em></pre>\n<p>After installation, restart your computer and then type docker version in powershell to check the installed version of docker, if this works fine then installation is successful.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/599/0*WRPyXNHbgnG3iRBy.PNG\"></figure><p>Now you can run any windows container on this. To run linux containers you will need to enable LCOW on your windows. See next steps to enable\u00a0LCOW.</p>\n<p><strong>3. Enable LCOW (Linux Containers on\u00a0Windows)</strong></p>\n<p>To run linux containers on windows we will need to make some changes in docker default configurations.</p>\n<p>First we will set an environment variable to enable linux conatiners support.</p>\n<pre><em>[Environment]::SetEnvironmentVariable(\"LCOW_SUPPORTED\", \"1\", \"Machine\")</em></pre>\n<p>Next we will create a docker daemon configuration file</p>\n<pre><em>$configfile = @\"<br>{<br>    \"experimental\": true<br>}<br>\"@</em></pre>\n<pre><em>$configfile | Out-File -FilePath C:\\ProgramData\\docker\\config\\daemon.json -Encoding ascii -Force</em></pre>\n<p>Finally we need to install linux kernel to run linux conatiners. Replace <strong>v4.14.35-v0.3.9 </strong>with latest\u00a0version</p>\n<pre><em>Invoke-WebRequest -Uri \"https://github.com/linuxkit/lcow/releases/download/v4.14.35-v0.3.9/release.zip\" -UseBasicParsing -OutFile release.zip</em></pre>\n<pre><em>Expand-Archive release.zip -DestinationPath \"$Env:ProgramFiles\\Linux Containers\\.\"</em></pre>\n<p>Now restart your machine to apply\u00a0changes</p>\n<p><strong>4. Run a Linux Conatiner</strong></p>\n<p>Now to test if everything is working fine, we will run a linux test container. To run linux containers we need to specify the\u00a0platform</p>\n<pre><em>docker run --rm -it --platform=linux ubuntu bash</em></pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/647/0*HnRokkkDlaxh6IEv.PNG\"></figure><p><strong>5. Install Docker-Compose (Optional)</strong></p>\n<p>If you are used to using docker-compose then you can install this as this is available for windows server as well. Replace <strong>\u201cv2.8.0\u201d</strong> to latest\u00a0version.</p>\n<p>You can get the latest release from this\u00a0link:</p>\n<p><a href=\"https://github.com/docker/compose/releases\">https://github.com/docker/compose/releases</a></p>\n<pre><em>$dockerComposeVersion</em> = \"v2.8.0\"<br><em>Invoke-WebRequest</em> \"https://github.com/docker/compose/releases/download/$dockerComposeVersion/docker-compose-Windows-x86_64.exe\" -UseBasicParsing -OutFile <em>$Env:ProgramFiles</em>\\docker\\docker-compose.exe</pre>\n<h3>Comments</h3>\n<p><a href=\"https://www.blogger.com/\">Powered by\u00a0Blogger</a></p>\n<p>Theme images by <a href=\"http://www.offset.com/photos/394244\">Michael\u00a0Elkan</a></p>\n<p><a href=\"https://www.blogger.com/profile/04282860802688302019\"><strong>FIZA</strong></a><a href=\"https://www.blogger.com/profile/04282860802688302019\">VISIT PROFILE</a></p>\n<h3><a href=\"https://www.blogger.com/go/report-abuse\">Report Abuse</a></h3>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=452cf6bf3180\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["linux-containers","lcow","docker","docker-compose","windows-server-2019"]},{"title":"Install Windows Server 2019 on a Virtual Machine\u200a\u2014\u200aStep by Step Guide","pubDate":"2022-07-30 15:13:04","link":"https://medium.com/@fizaashraf37/install-windows-server-2019-on-a-virtual-machine-step-by-step-guide-170dd1ab01ac?source=rss-fc853dc52440------2","guid":"https://medium.com/p/170dd1ab01ac","author":"Fizaashraf","thumbnail":"","description":"\n<h3>Install Windows Server 2019 on a Virtual Machine\u200a\u2014\u200aStep by Step\u00a0Guide</h3>\n<p>Today I am going to show you how to install windows server 2019 on a virtual machine in easy\u00a0steps.</p>\n<p><strong>Steps:</strong></p>\n<ul>\n<li>Download and Install\u00a0VMware</li>\n<li>Download Windows Server ISO\u00a0File</li>\n<li>Create VM in\u00a0Vmware</li>\n<li>Install Windows\u00a0Server</li>\n<li>Install Vmware Tools (Optional)</li>\n<li>Enable Nested Virtualization (Optional)</li>\n</ul>\n<p><strong>1. Download and Install\u00a0VMware</strong></p>\n<p>Go to VMware website and download the latest version of VMware Workstation Player</p>\n<p><a href=\"https://customerconnect.vmware.com/en/downloads/info/slug/desktop_end_user_computing/vmware_workstation_player/16_0\">Download VMware</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/583/0*ZwtGsIQ6iwI9wFkd.PNG\"></figure><p>Once it is downloaded then double click on the downloaded file to install it on your computer.</p>\n<p><strong>2. Download Windows Server ISO\u00a0file:</strong></p>\n<p>Go to Microsoft Evaluation Center website and download the ISO file for your platform and language. For me this was English(United States) 64 bit\u00a0edition.</p>\n<p><a href=\"https://www.microsoft.com/en-US/evalcenter/download-windows-server-2019?filetype=ISO\">Download Windows Server 2019\u00a0ISO</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/621/0*sfi532xAfRMTtz6F.PNG\"></figure><p><strong>3. Create VM in\u00a0VMware</strong></p>\n<p>Open Vmware workstation player that you installed in first step and click on <strong>Create a New Virtual\u00a0Machine</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/624/0*HTlcHv3zG22qvTcE.PNG\"></figure><p>This will open a new Virtual Machine Wizard. On this wizard select the last option (install operating system\u00a0later).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/637/0*F08o0dcprNRN2k3I.PNG\"></figure><p>Click Next and Select Microsoft Windows as Guest OS and Select Windows Server 2019 in\u00a0version.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/624/0*WP56IbkcGf2c3W0m.PNG\"></figure><p>Click Next and Select the location where you want to save this\u00a0VM</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/602/0*lvnhnJD1O-7Eq3n1.PNG\"></figure><p>Enter Disk Size. Minimum size should be 60 GB. 60 GB is enough for me. You can increase this depending on your\u00a0needs</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/602/0*S10luybStyuzzhSN.PNG\"></figure><p>Click Next and Select Customize Hardware</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/581/0*wN49VN1KTtaVGpt_.PNG\"></figure><p>A new window will pop up. On this window adjust memory size at\u00a04GB</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/579/0*ryNdmSv2JD0E_xlD.PNG\"></figure><p>Now close this window and click Finish to complete the creation of VM. Once the VM is created successfully, you can see this in VMs list. Click on the VM you just created and go Edit Virtual Machine\u00a0Settings</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/609/0*JPR3NOByLyMTleue.PNG\"></figure><p>In Virtual Machine Settings window go to CD/DVD(SATA) and select Use ISO Image file and then browse the ISO that you downloaded in Step No\u00a02</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/619/0*Pd-nbVY6ZcAE2NDr.PNG\"></figure><p>Click Ok to save the settings. In the next step we will install windows server 2019 on this Virtual\u00a0Machine.</p>\n<p><strong>4. Install Windows\u00a0Server</strong></p>\n<p>In VMware Select the VM that you created in the previous step and click Play Virtual Machine. This will start the virtual machine and take you to the installation wizard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/630/0*5tMZoNrnuc-slZHk.PNG\"></figure><p>On the next page select the version you want to install. If you want the Desktop version then select the 2nd or last\u00a0option.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/628/0*mMzH5e4KyYoLSDmq.PNG\"></figure><p>On the next page select the version you want to install. If you want the Desktop version then select the 2nd or last\u00a0option.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/628/0*Ha2Js_E7ZYIgY8uK.PNG\"></figure><p>Click Next and check I accept the license terms check box and then click next. On next page select Custom\u00a0Install</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/621/0*UWR-QV3wAPZZ6It-.PNG\"></figure><p>On next page select the drive where you want to install\u00a0windows</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/615/0*j63sHFXX2lhycbXq.PNG\"></figure><p>This will start installation of windows server on your\u00a0VM</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/616/0*gU0CrM7aYpgXMS-J.PNG\"></figure><p>Once the installation is complete, you will be prompted to enter the password for your account. Set any password that you can remember later on and then click\u00a0finish.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/610/0*nzFfQRi6COCfr0hW.PNG\"></figure><p>Now you can login to windows server 2019, send CTRL+ALT+DEL input to virtual machine from icon highlighted in screenshot and\u00a0login</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/611/0*yc_uB3o83oPXnKuQ.PNG\"></figure><p>That\u2019s it, Now you are ready to use your freshly installed windows server on your\u00a0machine.</p>\n<p><strong>5. Install VMware Tools (Optional)</strong></p>\n<p>This step is not necessary, but it is very handy to manage communication between your host and VM. Foe example, share files between your VM and host, or copy and paste between host and\u00a0VM</p>\n<p>To install VMware tools login to your guest OS (windows server 2019) and either install these from the popup bar beneath the VM window or in guest OS press windows key + R to open run menu. And type D:\\setup.exe and click\u00a0ok.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/603/0*ddBXDIhEmxVZM6fl.PNG\"></figure><p>Install with all the default options and then restart the\u00a0VM.</p>\n<p><strong>1. Enable Nested Virtualization (Optional)</strong></p>\n<p>Note: This is only needed if you want to enable virtualization in your guest operating system or you want to use the containerization feature. Otherwise you can skip this\u00a0step.</p>\n<p>To enable nested virtualization, go to your virtual machine settings from VMware and select processors. And check the first and last checkbox. Then click ok and start your VM\u00a0again.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/621/0*y4wFRQ0lzd_mV4NR.PNG\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=170dd1ab01ac\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Install Windows Server 2019 on a Virtual Machine\u200a\u2014\u200aStep by Step\u00a0Guide</h3>\n<p>Today I am going to show you how to install windows server 2019 on a virtual machine in easy\u00a0steps.</p>\n<p><strong>Steps:</strong></p>\n<ul>\n<li>Download and Install\u00a0VMware</li>\n<li>Download Windows Server ISO\u00a0File</li>\n<li>Create VM in\u00a0Vmware</li>\n<li>Install Windows\u00a0Server</li>\n<li>Install Vmware Tools (Optional)</li>\n<li>Enable Nested Virtualization (Optional)</li>\n</ul>\n<p><strong>1. Download and Install\u00a0VMware</strong></p>\n<p>Go to VMware website and download the latest version of VMware Workstation Player</p>\n<p><a href=\"https://customerconnect.vmware.com/en/downloads/info/slug/desktop_end_user_computing/vmware_workstation_player/16_0\">Download VMware</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/583/0*ZwtGsIQ6iwI9wFkd.PNG\"></figure><p>Once it is downloaded then double click on the downloaded file to install it on your computer.</p>\n<p><strong>2. Download Windows Server ISO\u00a0file:</strong></p>\n<p>Go to Microsoft Evaluation Center website and download the ISO file for your platform and language. For me this was English(United States) 64 bit\u00a0edition.</p>\n<p><a href=\"https://www.microsoft.com/en-US/evalcenter/download-windows-server-2019?filetype=ISO\">Download Windows Server 2019\u00a0ISO</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/621/0*sfi532xAfRMTtz6F.PNG\"></figure><p><strong>3. Create VM in\u00a0VMware</strong></p>\n<p>Open Vmware workstation player that you installed in first step and click on <strong>Create a New Virtual\u00a0Machine</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/624/0*HTlcHv3zG22qvTcE.PNG\"></figure><p>This will open a new Virtual Machine Wizard. On this wizard select the last option (install operating system\u00a0later).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/637/0*F08o0dcprNRN2k3I.PNG\"></figure><p>Click Next and Select Microsoft Windows as Guest OS and Select Windows Server 2019 in\u00a0version.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/624/0*WP56IbkcGf2c3W0m.PNG\"></figure><p>Click Next and Select the location where you want to save this\u00a0VM</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/602/0*lvnhnJD1O-7Eq3n1.PNG\"></figure><p>Enter Disk Size. Minimum size should be 60 GB. 60 GB is enough for me. You can increase this depending on your\u00a0needs</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/602/0*S10luybStyuzzhSN.PNG\"></figure><p>Click Next and Select Customize Hardware</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/581/0*wN49VN1KTtaVGpt_.PNG\"></figure><p>A new window will pop up. On this window adjust memory size at\u00a04GB</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/579/0*ryNdmSv2JD0E_xlD.PNG\"></figure><p>Now close this window and click Finish to complete the creation of VM. Once the VM is created successfully, you can see this in VMs list. Click on the VM you just created and go Edit Virtual Machine\u00a0Settings</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/609/0*JPR3NOByLyMTleue.PNG\"></figure><p>In Virtual Machine Settings window go to CD/DVD(SATA) and select Use ISO Image file and then browse the ISO that you downloaded in Step No\u00a02</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/619/0*Pd-nbVY6ZcAE2NDr.PNG\"></figure><p>Click Ok to save the settings. In the next step we will install windows server 2019 on this Virtual\u00a0Machine.</p>\n<p><strong>4. Install Windows\u00a0Server</strong></p>\n<p>In VMware Select the VM that you created in the previous step and click Play Virtual Machine. This will start the virtual machine and take you to the installation wizard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/630/0*5tMZoNrnuc-slZHk.PNG\"></figure><p>On the next page select the version you want to install. If you want the Desktop version then select the 2nd or last\u00a0option.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/628/0*mMzH5e4KyYoLSDmq.PNG\"></figure><p>On the next page select the version you want to install. If you want the Desktop version then select the 2nd or last\u00a0option.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/628/0*Ha2Js_E7ZYIgY8uK.PNG\"></figure><p>Click Next and check I accept the license terms check box and then click next. On next page select Custom\u00a0Install</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/621/0*UWR-QV3wAPZZ6It-.PNG\"></figure><p>On next page select the drive where you want to install\u00a0windows</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/615/0*j63sHFXX2lhycbXq.PNG\"></figure><p>This will start installation of windows server on your\u00a0VM</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/616/0*gU0CrM7aYpgXMS-J.PNG\"></figure><p>Once the installation is complete, you will be prompted to enter the password for your account. Set any password that you can remember later on and then click\u00a0finish.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/610/0*nzFfQRi6COCfr0hW.PNG\"></figure><p>Now you can login to windows server 2019, send CTRL+ALT+DEL input to virtual machine from icon highlighted in screenshot and\u00a0login</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/611/0*yc_uB3o83oPXnKuQ.PNG\"></figure><p>That\u2019s it, Now you are ready to use your freshly installed windows server on your\u00a0machine.</p>\n<p><strong>5. Install VMware Tools (Optional)</strong></p>\n<p>This step is not necessary, but it is very handy to manage communication between your host and VM. Foe example, share files between your VM and host, or copy and paste between host and\u00a0VM</p>\n<p>To install VMware tools login to your guest OS (windows server 2019) and either install these from the popup bar beneath the VM window or in guest OS press windows key + R to open run menu. And type D:\\setup.exe and click\u00a0ok.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/603/0*ddBXDIhEmxVZM6fl.PNG\"></figure><p>Install with all the default options and then restart the\u00a0VM.</p>\n<p><strong>1. Enable Nested Virtualization (Optional)</strong></p>\n<p>Note: This is only needed if you want to enable virtualization in your guest operating system or you want to use the containerization feature. Otherwise you can skip this\u00a0step.</p>\n<p>To enable nested virtualization, go to your virtual machine settings from VMware and select processors. And check the first and last checkbox. Then click ok and start your VM\u00a0again.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/621/0*y4wFRQ0lzd_mV4NR.PNG\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=170dd1ab01ac\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["vmware-tools","windows-server","windows-server-2019","virtual-machine","vmware"]}]}